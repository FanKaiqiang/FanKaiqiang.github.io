(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{347:function(e,t,v){"use strict";v.r(t);var _=v(40),i=Object(_.a)({},function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("div",{staticClass:"tip custom-block"},[v("p",[e._v("今天下午想了半天博客该写些什么，但是总感觉这几天学的比如说轮播啊什么的都不太好写博客。昨天我的打算是每晚都是用来写博客的，因为我的打算是每天完成一个系统课任务，太多了感觉圆消化不了。")])]),e._v(" "),v("p",[e._v("刚才也一直在会看我自己的笔记，发现简直不能看，所以还是要整理一下。现在做一个规定，本星期的博客就整理上星期所学的知识，希望这样也能起到一些复习作用。")]),v("div",{staticStyle:{"text-align":"center"}},[v("img",{attrs:{src:"20181105A/timg.jpg",alt:"复习"}})]),v("p"),e._v(" "),v("p",[e._v("这次的博客的主题还是DOM，上次写过一篇关于DOM的博客，但是之前因为系统课还没学到DOM这节，所以写起来也只是一知半解，这次的话树妖目的就是把我笔记上的东西捋一捋，毕竟笔记做得有点难看，如果不整理出来笔记就报废了。所以这节课就先不去查资料扩展知识了，尽可能地把我那次课的知识复盘一次。")]),e._v(" "),v("h2",{attrs:{id:"dom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dom","aria-hidden":"true"}},[e._v("#")]),e._v(" DOM")]),e._v(" "),v("p",[e._v("DOM的全称是Document Object Model，即文档对象模型。之前的博客引用了MDN的定义，这里就不重复操作了。")]),e._v(" "),v("p",[e._v("「文档对象模型」中的文档指的是XML文档，而HTML是衍生于XML的。那么模型指的又是什么一回事呢？")]),e._v(" "),v("p",[e._v("可以知道HTML的结构大致如下：顶部的html声明、html标签、head标签和body标签。总体来说，html文档是呈现一种树形结构的，那么如何将这个树形结构存放于内存中呢？首先想到的是对象，而将Document（文档）转化为object（对象）的过程，就把它称之为一种模型（Model）的映射。这个过程的全称即是DOM。如图所示，就是由HTML树转化而来的DOM树：")]),v("div",{staticStyle:{"text-align":"center"}},[v("img",{attrs:{src:"20181105A/001.jpg",alt:"DOM树"}})]),v("p"),e._v(" "),v("p",[e._v("DOM的标准决定了这些对象要以什么方式来存放这个文档。其中存储html文档中的各种元素与内容的对象分别由以下几种构造函数构造，比如ELement（元素）、Text（文本）、Document（根节点）等，正如JS中的对象都是继承于Object的，在页面中的这几种构造函数构造出来的对象都是继承于Node（节点）的。Node是在这些种对象的原型链的顶端的，也可以理解为元素、文本以及根节点在页面中都是属于节点的。")]),e._v(" "),v("p",[e._v("以获取『<span>字符串</span>』标签中的文本为例：")]),e._v(" "),v("div",{staticClass:"language-js line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[e._v("span"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("firstChild             "),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v('//"字符串"')]),e._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("typeof")]),e._v(" span"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("firstChild      "),v("span",{pre:!0,attrs:{class:"token comment"}},[e._v('//"object"')]),e._v("\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br")])]),v("p",[e._v("由此可见，span的第一个子元素是对象，并非浏览器展示出来得那样像个字符串。这个对象是个文本节点，原型指向Text.prototype。这里需要指出的是，如果在html文档中有注释，注释也会被当做节点，为注释节点，原型链指向comment.prototype。")]),e._v(" "),v("p",[e._v("所以，页面上所有标签都有雨它对应的构造函数，浏览器只要发现一个标签，就用对象的构造函数给它构造出对应的对象。")]),e._v(" "),v("h2",{attrs:{id:"dom-api"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dom-api","aria-hidden":"true"}},[e._v("#")]),e._v(" DOM API")]),e._v(" "),v("p",[e._v("DOM的主要功能就是在操作页面中的节点时，可以通过操作对应对象的API来实现。这些相关的API就是DOM API。")]),e._v(" "),v("p",[e._v("Node主要分为Document、Element、Text三类。其中Node也是一种object，作为所有节点对象的原型链顶端，Node的API是所有类型的节点都可以使用的。下面选择性地对一些API进行讲解。")]),v("div",{staticStyle:{"text-align":"center"}},[v("img",{attrs:{src:"20181105A/002.jpg",alt:"API"}})]),v("p"),e._v(" "),v("h3",{attrs:{id:"node的属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node的属性","aria-hidden":"true"}},[e._v("#")]),e._v(" Node的属性")]),e._v(" "),v("p",[e._v("在学习API的过程中，常常会见到这些单词，很多API都是由这些单词拼凑而成的，知道这些单词的意思可以帮助又快又好地理解这些API的含义：")]),e._v(" "),v("ul",[v("li",[e._v("child、children、parent   子节点、父节点")]),e._v(" "),v("li",[e._v("node  节点")]),e._v(" "),v("li",[e._v("first、last   首个、末个")]),e._v(" "),v("li",[e._v("next、previous    下一个、上一个")]),e._v(" "),v("li",[e._v("type  类型")]),e._v(" "),v("li",[e._v("value、text、content  值、文本、内容")]),e._v(" "),v("li",[e._v("inner、outer  里面、外面")]),e._v(" "),v("li",[e._v("element   元素、标签")]),e._v(" "),v("li",[e._v("sibling、siblings 兄弟元素")])]),e._v(" "),v("p",[e._v("下面就将几个由这几个单词拼凑起来的几个具有代表性的Node的属性。")]),e._v(" "),v("ul",[v("li",[e._v("ChildNodes ：顾名思义，即是所有子节点。其中要注意，获取到的文档中的回车也算是子节点。因此所有子节点并不等于所有子元素。")]),e._v(" "),v("li",[e._v("Children：所有子元素。其中不包含文本节点（回车等）。")]),e._v(" "),v("li",[e._v("firstChild：首个子节点。lastChild就是末个子节点。")]),e._v(" "),v("li",[e._v("firstElementChild：首个子元素。")]),e._v(" "),v("li",[e._v("previousSibling：前一个兄弟节点。nextSibling即为下一个兄弟节点。")]),e._v(" "),v("li",[e._v("previousElementSibling：前一个兄弟元素。")]),e._v(" "),v("li",[e._v("innerText：节点里面的文本。")]),e._v(" "),v("li",[e._v("nodeName：节点名。注意，获取的节点名一般都是大写的，比如document.body.nodeName就会返回BODY，但是svg元素除外，svg节点会返回小写的节点名称。")]),e._v(" "),v("li",[e._v("nodeType：节点属性。会返回一个代表节点属性的数值，在之前的博客里讲到过。")]),e._v(" "),v("li",[e._v("nodeValue：返回节点的值")]),e._v(" "),v("li",[e._v("textContent：文本内容")]),e._v(" "),v("li",[e._v("innerText：内容文本")]),e._v(" "),v("li",[e._v("……")])]),e._v(" "),v("p",[e._v("这里着重讲一下textContent（文本内容）与innerText（内容文本）的区别：")]),e._v(" "),v("ol",[v("li",[e._v("textContent会获取所有元素的内容，包括<script>与<style>，但是innerText不会。")]),e._v(" "),v("li",[e._v("innerText不会返回隐藏文本的内容（display:none），但是textContent会。")]),e._v(" "),v("li",[e._v("innerText会受CSS的影响触发重排，textContent不会。")]),e._v(" "),v("li",[e._v("在IE中，如果对innerText进行修改，会破坏当前元素及后代的文本节点。")])]),e._v(" "),v("p",[e._v("可以看出innerText是会去识别CSS以及JS的内容的，而textContent不会，这是二者的主要区别。")]),e._v(" "),v("h3",{attrs:{id:"node的方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#node的方法","aria-hidden":"true"}},[e._v("#")]),e._v(" Node的方法")]),e._v(" "),v("ul",[v("li",[e._v(".appendChild()：把某元素设为子元素")]),e._v(" "),v("li",[e._v(".cloneNode()：克隆节点。如果采用深拷贝，须传入true，此时后代所有节点都会被克隆。如传入false，则只会克隆该节点本身。")]),e._v(" "),v("li",[e._v(".contains()：判断一个元素是否包含另一个元素")]),e._v(" "),v("li",[e._v(".hasChildNodes()：判断是否有子节点")]),e._v(" "),v("li",[e._v(".insertBefore()：把该节点插在某节点前")]),e._v(" "),v("li",[e._v(".isEqualNode()：是否相等节点。节点内容内容相等即可。")]),e._v(" "),v("li",[e._v(".isSameNode()：是否相同节点。同一个节点才是相同节点。")]),e._v(" "),v("li",[e._v(".removeChild()：在页面中删除节点，不过内存中仍然存在。")]),e._v(" "),v("li",[e._v(".replaceChild()：将子元素替换。")]),e._v(" "),v("li",[e._v(".normalize()：将当前节点及其后代常规化。规范化后的DOM树中不存在空文本与相邻的两个文本节点。")]),e._v(" "),v("li",[e._v("……")])]),e._v(" "),v("h3",{attrs:{id:"document的属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#document的属性","aria-hidden":"true"}},[e._v("#")]),e._v(" Document的属性")]),e._v(" "),v("ul",[v("li",[e._v("anchors：锚点。该属性会返回那些具有name属性的a标签")]),e._v(" "),v("li",[e._v("body：获取body标签")]),e._v(" "),v("li",[e._v("characterSet：使用的字符集")]),e._v(" "),v("li",[e._v("childElementCount：子元素个数")]),e._v(" "),v("li",[e._v("documentElement：html元素（根元素）")]),e._v(" "),v("li",[e._v("domain：域名")]),e._v(" "),v("li",[e._v("fullscreen：全屏")]),e._v(" "),v("li",[e._v("head：获取head元素")]),e._v(" "),v("li",[e._v("hidden：返回是否被隐藏")]),e._v(" "),v("li",[e._v("images：返回所有img标签")]),e._v(" "),v("li",[e._v("link：返回a标签")]),e._v(" "),v("li",[e._v("onxxx：事件监听")]),e._v(" "),v("li",[e._v("plugin：插件")]),e._v(" "),v("li",[e._v("referer：源页面。通过这个属性可以形成防盗链。")]),e._v(" "),v("li",[e._v("script：获取所有script标签")]),e._v(" "),v("li",[e._v("scrollingElement：正在滚动的标签")]),e._v(" "),v("li",[e._v("visibilityState：页面是否被显示")]),e._v(" "),v("li",[e._v("……")])]),e._v(" "),v("h3",{attrs:{id:"document的方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#document的方法","aria-hidden":"true"}},[e._v("#")]),e._v(" Document的方法")]),e._v(" "),v("ul",[v("li",[e._v(".close()：创建元素")]),e._v(" "),v("li",[e._v(".createElement()：创建文本节点")]),e._v(" "),v("li",[e._v(".createTextNode()：退出全屏")]),e._v(" "),v("li",[e._v(".exitFullScreen()：退出全屏")]),e._v(" "),v("li",[e._v(".execCommand()：执行命令")]),e._v(" "),v("li",[e._v(".getSelection()：获取选中文本")]),e._v(" "),v("li",[e._v(".hasFocus()：判断用户是否在当前页面")]),e._v(" "),v("li",[e._v(".querySelector()：选择器选择到的第一个元素")]),e._v(" "),v("li",[e._v(".querySelectAll()：选择器选择的所有元素")]),e._v(" "),v("li",[e._v(".write()：写入内容")]),e._v(" "),v("li",[e._v("……")])]),e._v(" "),v("hr"),e._v(" "),v("p",[e._v("事实上DON API 数不胜数，在课上也就讲到这里就完结了，Element的API都还没有讲。如果全都要讲，几篇博客都讲不完。所以这节课的主要目的还是知道DOM是怎么一回事，DOM API是怎么样的机制、如何使用，在日后的学习过程中见到相关的内容能够游刃有余。")]),v("div",{staticStyle:{"text-align":"center"}},[v("img",{attrs:{src:"20181105A/003.jpg",alt:"沧海一粟"}})]),v("p"),e._v(" "),v("p",[e._v("如何学习API？DOM API无外乎与节点相关的增删改查，要想学好API。首先要搞清楚英文的意思，如果弄明白了API的英文意思也就学会了一半。除此之外还可以看MDN，可以看到，API的总数是相当之多，今天罗列的只是沧海一粟，如果遇到什么不明白的API，往这里查就是了："),v("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API",target:"_blank",rel:"noopener noreferrer"}},[e._v("Web API 接口 | MDN"),v("OutboundLink")],1)])])},[],!1,null,null,null);t.default=i.exports}}]);