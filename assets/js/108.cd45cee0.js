(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{418:function(e,t,S){"use strict";S.r(t);var r=S(40),v=Object(r.a)({},function(){var e=this,t=e.$createElement,S=e._self._c||t;return S("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[S("div",{staticClass:"tip custom-block"},[S("p",[e._v("原本想这个月把 TypeScript 的课程看完，结果后面根本就没怎么看，一回宿舍就刷 B 站去了，看什么看？博客这个月也要现在来抢救，可以说是越来越水了，需要反思一下了。👴这回把话就放在这里了，👴这就把 B 站卸了，👴以后不会再装回来了。但是要让我过年回家还在这里刷课程，好不容易放一次假，怎么可能呢？")])]),e._v(" "),S("p",[e._v("在 Web 安全领域中，XSS 和 CSRF 是最常见的攻击方式。而这部分的知识也是早之前就学过的老知识了，👴一直以为👴写过相关的博客，没想到竟然没有。之前看 HTTP 深入浅出的课也温习过这部分的内容，这回就趁着今天难得的清闲时间，把这篇欠账不上吧。")]),S("div",{staticStyle:{"text-align":"center"}},[S("img",{attrs:{src:"https://s2.ax1x.com/2020/01/20/1icKFe.jpg",alt:"Web 安全"}})]),S("p"),e._v(" "),S("h2",{attrs:{id:"xss-攻击"}},[S("a",{staticClass:"header-anchor",attrs:{href:"#xss-攻击","aria-hidden":"true"}},[e._v("#")]),e._v(" XSS 攻击")]),e._v(" "),S("p",[e._v("XSS 攻击也叫跨站脚本攻击（Cross Site Scripting），通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是 JavaScript，但实际上也可以包括Java、 VBScript、ActiveX、 Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到包括但不限于更高的权限（如执行一些操作）、私密网页内容、会话和 cookie 等各种内容。")]),e._v(" "),S("div",{staticClass:"tip custom-block"},[S("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),S("p",[e._v("Cross-site scripting 的英文首字母缩写本应为 CSS，但因为 CSS 在网页设计领域已经被广泛指层叠样式表（Cascading Style Sheets），所以将 Cross（意为“交叉”）改以交叉形的X做为缩写。但早期的文件还是会使用 CSS 表示 Cross-site scripting。")])]),e._v(" "),S("p",[e._v("常见的 XSS 攻击有三种：反射型 XSS 攻击、DOM-based 型 XSS 攻击以及存储型XSS攻击。")]),e._v(" "),S("ol",[S("li",[S("p",[e._v("反射型 XSS 攻击")]),e._v(" "),S("p",[e._v("反射型 XSS 一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL（如"),S("code",[e._v('http://localhost:8080/helloController/search?name=<script>alert("hey!")<\/script>')]),e._v("），当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。反射型 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookie 或进行钓鱼欺骗。")])]),e._v(" "),S("li",[S("p",[e._v("存储型 XSS 攻击")]),e._v(" "),S("p",[e._v("也叫持久型 XSS，主要将 XSS 代码提交存储在服务器端（数据库，内存，文件系统等），下次请求目标页面时不用再提交 XSS 代码。当目标用户访问该页面获取数据时，XSS 代码会从服务器解析之后加载出来，返回到浏览器做正常的 HTML 和 JS 解析执行，XSS 攻击就发生了。存储型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。")])]),e._v(" "),S("li",[S("p",[e._v("DOM-based 型 XSS 攻击")]),e._v(" "),S("p",[e._v("基于 DOM 的 XSS 攻击是指通过恶意脚本修改页面的 DOM 结构，是纯粹发生在客户端的攻击。DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞。")])])]),e._v(" "),S("p",[e._v("不管是哪种类型的 XSS 攻击，攻击者都是需要将恶意程序注入到网页。举一个简单的例子，一个网站有留言板的功能，有用户提交了一条了包含 XSS 代码的留言（如"),S("code",[e._v("<script>")]),e._v("标签）到数据库。当后续进入网页的用户获取留言列表时，留言的内容会从服务器解析之后加载出来。浏览器就会把之前提交的 XSS 代码当做正常的 HTML 和 JS 解析执行，XSS 攻击就发生了。")]),e._v(" "),S("p",[e._v("要想防范 XSS 攻击，前端需要注意的就是"),S("strong",[e._v("不能相信用户输入的内容")]),e._v("，需要对用户输入的内容进行检查、过滤和转义，再提交给服务器。服务器也需要对用户输入进行处理，不能直接将用户的输入内容直接输出到浏览器。前端渲染页面时不要使用"),S("code",[e._v("innerHTML")]),e._v("，使用"),S("code",[e._v("innerText")]),e._v("，"),S("code",[e._v("<script>")]),e._v("就会被当成文本，不执行；如果一定要用"),S("code",[e._v("innerHTML")]),e._v("，就需要对字符进行过滤。在 XSS 防御中，输入检查一般是检查用户输入的数据中是否包含"),S("code",[e._v("&")]),e._v("、"),S("code",[e._v("<")]),e._v("、"),S("code",[e._v(">")]),e._v("、"),S("code",[e._v('"')]),e._v("、"),S("code",[e._v("'")]),e._v("、"),S("code",[e._v("/")]),e._v("等特殊字符，如果存在，则对特殊字符进行过滤或编码，这种方式也称为 XSS Filter。")]),e._v(" "),S("p",[e._v("此外，如果在 SetCookie 中设置了"),S("code",[e._v("HttpOnly")]),e._v("属性，那么通过 JS 脚本将无法读取到 Cookie 信息，这样能有效的防止 XSS 攻击获取到 Cookie 的内容")]),e._v(" "),S("h2",{attrs:{id:"csrf-攻击"}},[S("a",{staticClass:"header-anchor",attrs:{href:"#csrf-攻击","aria-hidden":"true"}},[e._v("#")]),e._v(" CSRF 攻击")]),e._v(" "),S("p",[e._v("跨站请求伪造（Cross-site request forgery），也被称为 “One Click Attack” 或者 Session Riding，通常缩写为 CSRF 或者 XSRF，是一种对网站的恶意利用。CSRF 与 XSS 不同，XSS 是利用站点内的信任用户，而 CSRF 则通过伪装来自受信任用户的请求来利用受信任的网站。与 XSS 攻击相比，CSRF 攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比 XSS 更具危险性。")]),e._v(" "),S("p",[e._v("通常情况下，CSRF 攻击是攻击者借助受害者的 Cookie 骗取服务器的信任，可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击服务器，从而在并未授权的情况下执行在权限保护之下的操作。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。")]),e._v(" "),S("p",[e._v("下面是一个例子，假如一家银行用以运行转账操作的URL地址如下："),S("code",[e._v("http://www.examplebank.com/withdraw?account=AccoutName&amount=1000&for=PayeeName")]),e._v("。那么，一个恶意攻击者可以在另一个网站上放置如下代码："),S("code",[e._v('<img src="http://www.examplebank.com/withdraw?account=Alice&amount=1000&for=Badman">')]),e._v("。如果有账户名为 Alice 的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息（token）尚未过期，那么她就会损失 1000 资金。原理大致如图所示：")]),S("div",{staticStyle:{"text-align":"center"}},[S("img",{attrs:{src:"https://s2.ax1x.com/2020/01/20/1iXbHU.png",alt:"CSRF攻击"}})]),S("p"),e._v(" "),S("p",[e._v("为了防范 CSRF 攻击，就需要有手段来识别伪造的请求。在当前主要有以下几种应对方式：")]),e._v(" "),S("ol",[S("li",[S("p",[e._v("验证码")]),e._v(" "),S("p",[e._v("验证码是一种对抗 CSRF 攻击的最简洁而有效的防御方法。CSRF 攻击往往是在用户不知情的情况下构造了网络请求。而验证码会强制用户必须与应用进行交互，才能完成最终请求。通常情况下，验证码能够很好地遏制 CSRF 攻击，但是给所有的网站操作都加上验证码也是不现实的，所以这种方法只能作为一种辅助手段。")])]),e._v(" "),S("li",[S("p",[e._v("验证 HTTP Referer 字段")]),e._v(" "),S("p",[e._v("根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。而如果是 CSRF 攻击传来的请求，Referer 字段会是包含恶意网址的地址，这时候服务器就能识别出恶意的访问。然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。")])]),e._v(" "),S("li",[S("p",[e._v("添加校验 token")]),e._v(" "),S("p",[e._v("由于 CSRF 的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供的验证信息并不保存在 cookie 中，并且攻击者无法伪造，那么攻击者就无法再运行 CSRF 攻击。这种数据通常是页面中的一个数据项。服务器将其生成并附加在页面中，其内容是一个伪随机数。当客户端通过正确的网页提交请求时，这个伪随机数也一并提交上去以供校验。在正常访问时，客户端浏览器能够正确得到并传回这个伪随机数，而通过 CSRF 传来的欺骗性攻击中，攻击者无从事先得知这个伪随机数的值，服务端就会因为校验 token 的值为空或者错误，拒绝这个可疑请求。")])])]),e._v(" "),S("hr"),e._v(" "),S("p",[e._v("以上就是本文关于 XSS 攻击和 CSRF 攻击的所有内容。因为自己之前对这个知识点实际上并不熟悉😓，所以在写博客的时候又是边查阅其他博客边学习的套路来写的，摘录的部分比较多，不过今天晚上还是把这篇博客肝出来了，算是了解决了一篇欠账了。今天下班之后马上就要准备回家，终于到了回家过年的时候了，希望待会去坐车的时候一切顺利吧。")]),S("div",{staticStyle:{"text-align":"center"}},[S("img",{attrs:{src:"https://s2.ax1x.com/2020/01/20/1FpNHP.jpg",alt:"回家"}})]),S("p"),e._v(" "),S("p",[e._v("以下内容在本文的编写中，给了我很大启发，在此鸣谢：")]),e._v(" "),S("ol",[S("li",[S("a",{attrs:{href:"https://blog.csdn.net/m0_37631322/article/details/81346335",target:"_blank",rel:"noopener noreferrer"}},[e._v("XSS 和 CSRF简述及预防措施_xss,csrf,web安全_我的博客-CSDN博客"),S("OutboundLink")],1)]),e._v(" "),S("li",[S("a",{attrs:{href:"https://blog.csdn.net/qq_41606973/article/details/86504747",target:"_blank",rel:"noopener noreferrer"}},[e._v("CSRF_时光偏执的博客-CSDN博客"),S("OutboundLink")],1)]),e._v(" "),S("li",[S("a",{attrs:{href:"https://blog.csdn.net/xiaoxinshuaiga/article/details/80766369",target:"_blank",rel:"noopener noreferrer"}},[e._v("CSRF攻击与防御（写得非常好）_xiaoxinshuaiga的博客-CSDN博客"),S("OutboundLink")],1)])])])},[],!1,null,null,null);t.default=v.exports}}]);