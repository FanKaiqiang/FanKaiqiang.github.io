(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{366:function(t,a,s){"use strict";s.r(a);var e=s(40),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"tip custom-block"},[s("p",[t._v("今天晚上早点写博客，这几天的博客都是今天的博客明天写，今天看来要把这个进度追一追了，现在八点多，十一点钟肯定可以把这篇博客写完了。")])]),t._v(" "),s("p",[t._v("今天的内容是有关于HTTP缓存的，在写Session那篇博客的时候还想要不要把LocalStorage和Cache-Control的内容一起写了，毕竟是在一节课里讲完的。现在想想分成三次来写还是很有必要的，真没想到写了这么多。")]),s("div",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"20181130A/timg.jfif",alt:"cache"}})]),s("p"),t._v(" "),s("p",[t._v("今天晚上看完了web性能优化的内容，里面就提到了Cache-Control。本来打算先写web性能优化的博客的，但是一看到Cache-Control也是我打算写的内容，我就想干脆这次先写掉到了，这次的内容就笔记上来看也不是很多，就大致地把笔记整理一下吧。")]),t._v(" "),s("h2",{attrs:{id:"使用cache-control"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用cache-control","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用Cache-Control")]),t._v(" "),s("p",[t._v("HTTP 缓存机制是 web 性能优化的重要手段。在期中测试的题目里面有一道「从输入URL到页面加载完毕会发生什么」的题目，其中最开始的一步就是查询是否存在该页面的缓存，如果存在缓存就可以直接从缓存读取。使用缓存能够让浏览器在一段时间内不访问服务器，直接使用本地的内容作为响应。可见如果使用缓存，确实可以节省许多请求以及相应的时间。那么要如何使用缓存呢？这就要讲到Cache-Control了。")]),t._v(" "),s("p",[t._v("Cache-Control也是Web性能优化的一部分，从字面意思上来看就是「缓存控制」。网页的缓存就是由HTTP消息头中的“Cache-control”来控制的。Cache-Control 通用消息头字段被用于在HTTP 请求和响应中通过指定指令来实现缓存机制。比如说，希望在页面加载JS与CSS的时候速度更快一点，因为网站的页面JS与CSS不见得就会经常更新，所以可以把这些内容缓存起来，那么怎么设定缓存呢？下面是一个例子：")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Cache-control'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'max-age = 30'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("上面就等于是设定了一个Cache-control消息头，意味在30s之内无需再次请求此次响应的内容，直到下一次30s开始之前，直接使用缓存的内容，这样就等于是设定缓存的有效时间。如果不想使用缓存中的内容，选中开发者工具中的Network-disable cache选项，从新加载网页就不会显示缓存中的内容了。")]),t._v(" "),s("p",[t._v("不是什么数据都可以设置Cache-control的，比如说网站的首页内容。因为如果首页缓存了，在进行页面刷新后就不会再与服务器进行交互，此时如果首页的代码更新了，用户就无法获取最新的版本。")]),t._v(" "),s("p",[t._v("刚才做到了设置缓存的有效时间，假设设置有效期为十年。如果这期间的内容需要更新怎么办？因为只有请求相同url时才会去使用之前的缓存。只需要把需要更新的内容的url进行改动就可以了。可以在请求路径上加上查询参数，这个查询参数对的请求不会造成影响，但是可以借助这个查询参数来实现url的变动。比如在CSS的路径上添加查询参数：")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("stylesheet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("./css/default.css?v=2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("这时候只需要改动查询参数的内容，就不会再使用以前的缓存了。因此里面的查询参数可以看作是这个文件的版本号。这种改变请求路径的方法使用非常广泛，比如知乎首页的css文件就是在文件名后添加随机数，缓存时间设定为一年。这样既实现了最大程度地对缓存的利用，又可以方便地实现缓存的更新。")]),s("div",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"20181130A/001.jpg",alt:"Cache-Control"}})]),s("p"),t._v(" "),s("p",[t._v("浏览器会使用一块固定大小的内存用于存储缓存，如果堆积了过多的这种一年有效期的缓存，这块内存区域也是会慢的。所以浏览器会优先清空使用时间久的缓存。")]),t._v(" "),s("h2",{attrs:{id:"使用expires"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用expires","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用Expires")]),t._v(" "),s("p",[t._v("除了Cache-control消息头之外，Expires消息头也能够用来控制缓存。二者的区别在于一个设定什么时候过期，另一个是设定多久过期。下面是一个Expires消息头的使用示例：")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Expires'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Wed, 21 Oct 2015 07:28:00 GMT'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("上面设定的就是这条缓存的过期时间，与Cache-control的作用相似，在这个时间点到来之前，浏览器不会再向服务器请求相应内容。需要注意的是，这个时间是格林威治时间 (GMT)，不是平时用的时间，所以设置起来颇为不便。")]),t._v(" "),s("p",[t._v('除此之外，Expires消息头还有一个不可靠之处，因为这样设定的时间是以设备的本地时间为参照的，如果本地时间设置得有问题就会出乱子。所以现在都是优先使用Cache-control。如果在Cache-Control消息头设置了 "max-age" 或者 "s-max-age" 指令，那么设置的 Expires 头就会被忽略。')]),t._v(" "),s("h2",{attrs:{id:"使用etag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用etag","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用ETag")]),t._v(" "),s("p",[t._v("ETag响应头是资源的特定版本的标识符。在讲ETag之前来讲一讲MD5（消息摘要算法）。使用这种方法，可以将的文件转化为一段字符串。这钟字符串有个特点，如果两个文件，他们之间的差异越小，使用MD5生成的字符串差异就越大。所以可以很方便地借助MD5检测文件是否发生改变。使用npm安装MD5之后，就可以在JS中讲信息转化为MD5字符串了。")]),t._v(" "),s("p",[t._v("接下来就来讲讲ETag响应头。ETag响应头用于存放MD5字符串，在浏览器发起下一次请求时会将这段MD5字符串放在“If-None-Match”请求头里:")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置ETag响应头")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" filemd5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("md5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将信息转化为MD5字符串")]),t._v("\nresponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Etag'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("filemd5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把MD5字符串存入ETag响应头")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("这段MD5字符串就相当于版本号，当浏览器将这段版本号提交给服务器，如果服务器中的版本号与浏览器缓存中的版本号一致，就不需要重新下载了：")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断浏览器If-None-Match请求头中的内容")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("header"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'If-None-Match'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" filemd5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果内容与服务器中的MD5字符串相等")]),t._v("\n  response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("statusCode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("304")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回304状态码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("从上面的代码中可以发现，服务器在发现版本号一致时返回的是304状态码。如果客户端发送了一个带条件的GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个304状态码。简单的表达就是：客户端已经执行了GET，但文件未变化。所以说，这条304状态码的作用正好契合了的需要。")]),t._v(" "),s("p",[t._v("因此，ETag响应头可以让缓存更高效，并节省带宽，因为如果内容没有改变，Web服务器不需要发送完整的响应。而如果内容发生了变化，使用ETag有助于防止资源的同时更新相互覆盖（“空中碰撞”）。如果给定URL中的资源更改，则一定要生成新的Etag值。 因此Etag类似于指纹，也可能被某些服务器用于跟踪。 比较ETag能快速确定此资源是否变化，但也可能被跟踪服务器永久存留。")]),t._v(" "),s("p",[t._v("使用ETag响应头同样也是web性能优化的对策之一。使用Cache-Control响应头后，在缓存有效期内，直接不会再对相同内容发起请求。使用ETag响应头仍然会发起请求，如果接受到304状态码，就不会在下载相关内容。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("这篇博客是我的第50篇博客，这个月20篇博客的计划总算是完成了，再接再厉吧。今天博客的内容很少，主要是笔记做得不多，资料查的不多，而且内容并不算难得缘故。不过也写了这么久，看来效率确实不怎么高。值得欣慰的是明天完成node.js入门这节课就可以说是真正完成系统课了。明天就是12月了，不知不觉回来学校以及一个月了，绝对要完成最后节课，千万不能懈怠，虽然明天之后系统课就结束了，但是还是希望自己能够积极地去学习。")]),s("div",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"20181130A/002.jfif",alt:"12月"}})]),s("p")])},[],!1,null,null,null);a.default=n.exports}}]);