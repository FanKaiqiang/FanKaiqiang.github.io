(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{376:function(t,s,a){"use strict";a.r(s);var n=a(40),r=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"tip custom-block"},[a("p",[t._v("今天突然感觉不知道写啥了，晚上又有直播课，也想看一下。主要是这几天都看毕设课程去了，没学什么新知识，所以今天就再水一篇博客。")])]),t._v(" "),a("p",[t._v("之前学习的排序算法也好久没有跟进了，这篇博客就把希尔排序写一下。也是两个多月前学习的内容，我都已经忘记希尔排序是什么了，这次就当算重新学习一下好了。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181219A/timg.jpg",alt:"希尔"}})]),a("p"),t._v(" "),a("p",[t._v("已经好长一段时间没看过算法方面的内容了，这回直接来看看希尔排序在维基百科上的解释：")]),t._v(" "),a("blockquote",[a("p",[t._v("希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。")])]),t._v(" "),a("p",[t._v("希尔排序是1959年由 Donald Shell 发明的，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。希尔排序是基于插入排序的以下两点性质而提出改进方法的：")]),t._v(" "),a("ul",[a("li",[t._v("插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率")]),t._v(" "),a("li",[t._v("但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位")])]),t._v(" "),a("p",[t._v("希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。")]),t._v(" "),a("p",[t._v("假设有一个很小的数据在一个已按升序排好序的数组的末端。如果用复杂度为O(n"),a("sup",[t._v("2")]),t._v(")的排序（冒泡排序或插入排序），可能会进行n次的比较和交换才能将该数据移至正确位置。而希尔排序会用较大的步长移动数据，所以小数据只需进行少数比较和交换即可到正确位置。")]),t._v(" "),a("p",[t._v("通俗的讲，就是先将数组中相隔一定步长的数字分为一组，每个组分别进行插入排序，一轮排序结束后，缩小步长的值对数字进行分组，然后再对每个组进行插入排序。当步长为1时，算法变为普通插入排序，这一轮排序完成之后，整个排序过程也就完成了。")]),t._v(" "),a("p",[t._v("下面再看一张希尔排序的模拟过程的动图，与刚才用自然语言描述的方法基本一致：")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181219A/001.gif",alt:"希尔排序"}})]),a("p"),t._v(" "),a("p",[t._v("以下就是通过JS实现插入排序的代码：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shellSort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" temp\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" gap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" gap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" gap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" gap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" gap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" gap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//arr[i] = arr[j]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" gap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//arr[j] = arr[i]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shellSort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("p",[t._v("这里一口气叠了三层 for 循环，还用到了平时很少见的 >> 运算符，这里慢慢地把这个代码分析一下：")]),t._v(" "),a("ul",[a("li",[t._v("第一层 for：步长 gap 初状态为数组长度的一半（向下取整），每次循环结束后 gap 除以二，gap等于 0 的时候退出循环。")]),t._v(" "),a("li",[t._v("第二层 for：令 i 等于 gap（当前步长），设置一个变量 temp 等于 "),a("code",[t._v("arr[i]")]),t._v(" ，每次循环结束后 i 加一，i 小于数组长度时退出循环。")]),t._v(" "),a("li",[t._v("第三层 for：令 j 等于 i 减去 gap，每次循环结束后 j - gap，当j小于零或 "),a("code",[t._v("arr[j] < arr[i]")]),t._v(" 时退出循环。")])]),t._v(" "),a("p",[t._v("这里的重头戏主要是第二层与第三层 for。假设 i 是当前数的下标，那么 j 就是 i 所在分组中的前一个数的下标。如果 "),a("code",[t._v("arr[j] > arr[i]")]),t._v("，就对调二者的值，然后再继续比较分组中在 i 前面的数字。第三层 for 主要任务是将分组进行插入排序，而第二层 for 的作用就是在将数字一个一个推入分组，当正则数组都完成了这一轮的插入排序之后（"),a("code",[t._v("i = len")]),t._v("），就相应减少步长 gap ，再重复这个操作。")]),t._v(" "),a("p",[t._v("上面的过程有点绕，我也是想了好一会才想明白，特别是对调操作那里，里面的j + gap（其实是 i）和外面的 j + gap（其实是 j）不是相等的。如果画一个流程图之类的可能有所帮助，这里就不画了，有点麻烦。直接看看这段代码在浏览器中的执行效果：")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181219A/002.png",alt:"希尔排序代码"}})]),a("p"),t._v(" "),a("p",[t._v("希尔排序的时间复杂度为时间复杂度为 O(nlog"),a("sub",[t._v("2")]),t._v("n)，希尔排序没有快速排序算法快 O(n(logn))，因此中等大小规模表现良好，对规模非常大的数据排序不是最优选择。但是比O(n"),a("sup",[t._v("2")]),t._v(")复杂度的算法快得多。")]),t._v(" "),a("p",[t._v("希尔排序非常容易实现，算法代码短而简单。此外，希尔算法在最坏的情况下和平均情况下执行效率相差不是很多，但是快速排序在最坏的情况下执行的效率会非常差。所以，几乎任何排序工作在开始时都可以用希尔排序，若在实际使用中证明它不够快，再改成快速排序这样更高级的排序算法。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("总而言之，希尔排序算法是直接插入排序算法的一种改进，减少了其复制的次数，速度要快很多。希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小，插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比o(n"),a("sup",[t._v("2")]),t._v(")好一些。")]),t._v(" "),a("p",[t._v("今天总算是水完了这篇博客，代码依旧是来自于老师的直播课。研究这个代码花了一些时间，现在还是感觉有点绕，不过基本捋清楚了。这次把希尔排序弄清楚了，也算是加深了印象，下次再忘了也好在这里找回来。")])])},[],!1,null,null,null);s.default=r.exports}}]);