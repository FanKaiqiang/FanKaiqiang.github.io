(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{388:function(t,s,a){"use strict";a.r(s);var n=a(40),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("编写于 2019-2-7 21:07:24")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[t._v("本篇博客早在上个月就已经决定要写了，但是一直拖着没写，直到现在，再放着不写也是不行的。本篇博客我就想把伪元素与伪类的一些知识归纳一下，虽说这是很基础的知识点，但是在上次多益笔试上被问到「如何使用 JS 中获取的伪元素」这个问题，这可难倒我了。")])]),t._v(" "),a("p",[t._v("所以我就想这一次把伪元素伪类这个知识点给了解一下，虽然下一次的笔试面试不见得会再碰到，就算是给自己拓展一下知识面吧。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20190106A/timg.jpg",alt:"失败"}})]),a("p"),t._v(" "),a("p",[t._v("伪元素与伪类统称伪选择器。该选择器不是选择元素，而是元素的某些部分，或仅在某些特定上下文中存在的元素。伪类并不是类，伪元素也并不是元素，可以理解为原元素的一个特殊部分。理解这一点是比较关键的，下面就对二者分别进行讲解。")]),t._v(" "),a("h2",{attrs:{id:"一、常见的伪类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、常见的伪类","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、常见的伪类")]),t._v(" "),a("p",[t._v("一个 CSS  伪类（pseudo-class） 是一个以冒号(:)作为前缀，被添加到一个选择器末尾的关键字，当你希望样式在特定状态下才被呈现到指定的元素时，你可以往元素的选择器后面加上对应的伪类（pseudo-class）。伪类是一种很方便的选择器，使用伪类可以减少很多在 JS 的操作，最常用的就是 "),a("code",[t._v(":hover")]),t._v(" 了。这里我就把一些常用的伪类都列出来，让自己涨涨见识，不要只会用 "),a("code",[t._v(":hover")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v(":active")]),t._v(" ：匹配被用户激活的元素。 :active 伪类通常用来匹配tab键交互。通常用于但并不限于 "),a("code",[t._v("<a>")]),t._v(" 和 "),a("code",[t._v("<button>")]),t._v(" HTML元素")]),t._v(" "),a("li",[a("code",[t._v(":checked")]),t._v(" ：表示任何处于选中状态的 radio, checkbox  或 "),a("code",[t._v("<select>")]),t._v(" 元素中的 "),a("code",[t._v("<option>")]),t._v(" 元素")]),t._v(" "),a("li",[a("code",[t._v(":disabled")]),t._v(" :表示任何被禁用的元素")]),t._v(" "),a("li",[a("code",[t._v(":empty")]),t._v(" : 代表没有子元素的元素")]),t._v(" "),a("li",[a("code",[t._v(":enabled")]),t._v(" :表示任何启用的（enabled）元素")]),t._v(" "),a("li",[a("code",[t._v(":first-child")]),t._v(" ：表示在一组兄弟元素中的第一个元素")]),t._v(" "),a("li",[a("code",[t._v(":first-of-type")]),t._v("：表示一组兄弟元素中其类型的第一个元素")]),t._v(" "),a("li",[a("code",[t._v(":focus")]),t._v("：表示获得焦点的元素（如表单输入）")]),t._v(" "),a("li",[a("code",[t._v(":hover")]),t._v("：适用于用户使用指示设备虚指一个元素（没有激活它）的情况")]),t._v(" "),a("li",[a("code",[t._v(":in-range")]),t._v("：代表一个 "),a("code",[t._v("<input>")]),t._v(" 元素，其当前值处于属性min 和max 限定的范围之内")]),t._v(" "),a("li",[a("code",[t._v(":invalid")]),t._v(" ：表示任意内容未通过验证的 "),a("code",[t._v("<input>")]),t._v(" 或其他 "),a("code",[t._v("<form>")]),t._v(" 元素")]),t._v(" "),a("li",[a("code",[t._v(":last-child")]),t._v(" ：代表父元素的最后一个子元素")]),t._v(" "),a("li",[a("code",[t._v(":last-of-type")]),t._v("：表示一组兄弟元素中其类型的最后一个元素")]),t._v(" "),a("li",[a("code",[t._v(":link")]),t._v("：用来选中元素当中的链接")]),t._v(" "),a("li",[a("code",[t._v(":not(X)")]),t._v("：是以一个简单的以选择器X为参数的功能性标记函数。它匹配不符合参数选择器X描述的元素")]),t._v(" "),a("li",[a("code",[t._v(":nth-child(an+b)")]),t._v(" ：将当前元素的子元素按照位置先后顺序从1开始排序，选择的结果为第（an+b）个元素的集合（n=0，1，2，3...）")]),t._v(" "),a("li",[a("code",[t._v(":nth-last-child(an+b)")]),t._v("：基本上和 "),a("code",[t._v(":nth-child")]),t._v(" 一样，只是它从结尾处反序计数，而不是从开头处")]),t._v(" "),a("li",[a("code",[t._v(":nth-last-of-type(an+b)")]),t._v(" ：匹配那些在它之后有 an+b-1 个相同类型兄弟节点的元素")]),t._v(" "),a("li",[a("code",[t._v(":nth-of-type()")]),t._v(" ：匹配文档树中在其之前具有 an+b-1 个相同兄弟节点的元素")]),t._v(" "),a("li",[a("code",[t._v(":only-child")]),t._v("：代表了属于某个父元素的唯一一个子元素")]),t._v(" "),a("li",[a("code",[t._v(":only-of-type")]),t._v("： 代表了任意一个元素，这个元素没有其他相同类型的兄弟元素")]),t._v(" "),a("li",[a("code",[t._v(":optional")]),t._v("：表示任意没有required（提交前必须有值）属性的 "),a("code",[t._v("<input>")]),t._v("，"),a("code",[t._v("<select>")]),t._v(" 或  "),a("code",[t._v("<textarea>")]),t._v(" 元素")]),t._v(" "),a("li",[a("code",[t._v(":out-of-range")]),t._v(" ： 表示一个 "),a("code",[t._v("<input>")]),t._v(" 元素，其当前值处于属性 min 和 max 限定的范围外")]),t._v(" "),a("li",[a("code",[t._v(":read-only")]),t._v("：表示元素不可被用户编辑的状态")]),t._v(" "),a("li",[a("code",[t._v(":read-write")]),t._v(" ：代表一个元素（例如可输入文本的 input 元素）可以被用户编辑")]),t._v(" "),a("li",[a("code",[t._v(":required")]),t._v("：表示 任意 "),a("code",[t._v("<input>")]),t._v(" 元素表示任意拥有 required 属性")]),t._v(" "),a("li",[a("code",[t._v(":root")]),t._v(" ：匹配文档树的根元素。对于 HTML 来说，:root 表示 "),a("code",[t._v("<html>")]),t._v(" 元素，除了优先级更高之外，与 html 选择器相同")]),t._v(" "),a("li",[a("code",[t._v(":valid")]),t._v(" ：表示内容验证正确的 "),a("code",[t._v("<input>")]),t._v(" 或其他 "),a("code",[t._v("<form>")]),t._v(" 元素")]),t._v(" "),a("li",[a("code",[t._v(":visited")]),t._v(" ：表示用户已访问过的链接")])]),t._v(" "),a("p",[t._v("上面列出了很多 CSS 伪类，其中涉及到很多表单的相关样式，当然选取某个子元素的操作和排除性的选择器也非常有用。需要指出的是，适用于链接样式的伪类各有四种，这些伪类包括 "),a("code",[t._v(":link")]),t._v("，"),a("code",[t._v(":hover")]),t._v("和 "),a("code",[t._v(":visited")]),t._v("。为了正常加上样式，需要把 "),a("code",[t._v(":active")]),t._v(" 的样式放在所有链接相关的样式后，这种链接伪类先后顺序被称为 LVHA 顺序: "),a("code",[t._v(":link")]),t._v(" — "),a("code",[t._v(":visited")]),t._v(" — "),a("code",[t._v(":hover")]),t._v(" — "),a("code",[t._v(":active")]),t._v("。优先级顺序为：")]),t._v(" "),a("blockquote",[a("p",[t._v("激活 > 覆盖 > 访问过 > 默认样式")])]),t._v(" "),a("h2",{attrs:{id:"二、js-操作伪元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、js-操作伪元素","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、JS 操作伪元素")]),t._v(" "),a("p",[t._v("伪元素（Pseudo-element）跟伪类很像，但它们又有不同的地方。它们都是关键字，但这次伪元素前缀是两个冒号 (:😃 ， 同样是添加到选择器后面去选择某个元素的某个部分。包括常用的 "),a("code",[t._v("::before")]),t._v("、"),a("code",[t._v("::after")]),t._v(" 在内，一共具有一下几种伪元素：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("::after")]),t._v(" ：用来创建一个伪元素，作为已选中元素的最后一个子元素")]),t._v(" "),a("li",[a("code",[t._v("::before")]),t._v("：创建一个伪元素，其将成为匹配选中的元素的第一个子元素")]),t._v(" "),a("li",[a("code",[t._v("::first-letter")]),t._v("：选中某块级元素第一行的第一个字母，并且文字所处的行之前没有其他内容")]),t._v(" "),a("li",[a("code",[t._v("::first-line")]),t._v("：在某块级元素的第一行应用样式")]),t._v(" "),a("li",[a("code",[t._v("::selection")]),t._v(" ：应用于文档中被用户高亮的部分（比如使用鼠标或其他选择设备选中的部分）")]),t._v(" "),a("li",[a("code",[t._v("::backdrop")]),t._v("：用于给全屏元素设置外部遮罩层样式，如"),a("code",[t._v("<dialog>")]),t._v("等元素")])]),t._v(" "),a("p",[t._v("因为伪元素本身并不是 DOM 元素，所以所有的伪元素都不能匹配任何真实存在的 html 元素，所以无法被 JS 直接操作。而伪元素的本质实际上是 CSS 选择器，所以要想使用 JS 操作伪元素，就得从操作 CSS 样式的角度来考虑了。因此 JS 面对伪元素并非无计可施的。")]),t._v(" "),a("h3",{attrs:{id:"_1、获取伪元素的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、获取伪元素的值","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、获取伪元素的值")]),t._v(" "),a("p",[t._v("利用"),a("code",[t._v("window.getComputedStyle")]),t._v("方法可以选择到伪元素，然后利用"),a("code",[t._v("getPropertyValue")]),t._v("方法获取对应的属性的值。比如：")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("style")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token style"}},[a("span",{pre:!0,attrs:{class:"token language-css"}},[t._v("\n  "),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("h3::after")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rocks!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 14px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("style")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("generated content"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" h3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'h3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n  result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getComputedStyle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'::after'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("the generated content is: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("content"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("the generated content is: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("content"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fontSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPropertyValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'font-size'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("h3",{attrs:{id:"_2、更改伪元素的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、更改伪元素的值","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、更改伪元素的值")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("window.getComputedStyle")]),t._v(" 方法只能获取到伪元素的属性值，并没有实现对其的操作。这里是我在网上查找到的几种方法，主要是围绕着操作 CSS 展开的。")]),t._v(" "),a("h4",{attrs:{id:"_1）利用dom的data-属性来更改content的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1）利用dom的data-属性来更改content的值","aria-hidden":"true"}},[t._v("#")]),t._v(" 1）利用DOM的data-*属性来更改content的值")]),t._v(" "),a("p",[t._v("这个方法是将伪元素的 content 属性与元素本身的 data-* 属性绑定，然后通过修改元素的 data-* 属性来改变伪元素的 content 属性，从而达到了操作伪元素的目的：")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("style")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token style"}},[a("span",{pre:!0,attrs:{class:"token language-css"}},[t._v("\n  "),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".test::before")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("attr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data-text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("style")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("data-text")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("TEXT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("data-color")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("red"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("这个方法主要用到了 html 元素的 data（标记）属性与 CSS 获取属性值的 attr() 表达式，将对伪元素的操作转换为对常规元素的操作，可以说是即简单又实用了。")]),t._v(" "),a("h4",{attrs:{id:"_2）更改class来实现伪元素样式的更改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2）更改class来实现伪元素样式的更改","aria-hidden":"true"}},[t._v("#")]),t._v(" 2）更改class来实现伪元素样式的更改")]),t._v(" "),a("p",[t._v("这个方法就是给原元素多写几种 class，使每种 class 下渲染相应样式的伪元素，这样只要切换 class 就可以达到操作伪元素的效果了。这种方法简单粗暴，值得记下来，但是感觉没有达到使用 JS 获取伪元素的效果啊……")]),t._v(" "),a("h4",{attrs:{id:"_3）head中添加style标签强制覆盖初始属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3）head中添加style标签强制覆盖初始属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 3）HEAD中添加style标签强制覆盖初始属性")]),t._v(" "),a("p",[t._v("这个方法是利用内部css样式的高优先级来覆盖外部css，很简单地就可以操作伪元素了，但是过于粗暴：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" style"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'style'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstyle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".test::before{color:green}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("如果觉得直接写内嵌样式不好，在创建内嵌样式的 "),a("code",[t._v("<style>")]),t._v(" 标签之后，可以利用 CSSStyleSheet 的 "),a("code",[t._v("insertRule")]),t._v(" 方法来添加样式。CSSStyleSheet是浏览器存放页面内所有css样式表的对象方法（不包括行内样式)，每个link和style标签都代表一个CSSStyleSheet对象，获取他们可以用"),a("code",[t._v("document.styleSheets")]),t._v("方法。")]),t._v(" "),a("p",[a("code",[t._v(".insertRule")]),t._v("的语法是"),a("code",[t._v("stylesheet.insertRule(rule, index)")]),t._v(",另一个参数是index，意思是在对应的styleSheets里的cssRules样式表中的位置，这个值越大则样式优先级越高，但是值不能超过当前样式表规则（cssRules）长度（CSS中先定义的样式总是会被后定义的覆盖就是这个缘故。），当值小于cssRules长度时，添加的样式规则会插入到index值定义的位置，之前其余的规则依次顺延。")]),t._v(" "),a("p",[t._v("具体操作如下：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" style"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'style'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("styleSheets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertRule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.test::before{color:green}'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("不过使用这种方法，如果页面内没有内嵌样式的style标签，则insertRule方法也无法发挥作用，局限性还是蛮大的。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("以上就是本篇博客中关于伪元素与伪类的全部内容。因为面试遇到这方面的题目栽了跟头，所以一直有点耿耿于怀，在网上搜索「JS 获取伪元素」也总没有我想要的答案，为什么不能「获取」呢？后面看了一篇别人写的文章，再结合 MDN 才算是搞明白，原来伪元素并不是元素，只是一种特殊的选择器，当然无法用常规的操作 DOM 的方法来操作它了。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20190106A/001.jpg",alt:"凌晨"}})]),a("p"),t._v(" "),a("p",[t._v("这篇文章的链接是："),a("a",{attrs:{href:"https://segmentfault.com/a/1190000003711146",target:"_blank",rel:"noopener noreferrer"}},[t._v("利用JavaScript获取并修改伪元素的值 - 我很好奇 - SegmentFault 思否"),a("OutboundLink")],1),t._v("。它在这个知识点上给我启发，本篇博客的写作目的也是把从中学到的东西记下来罢了，在此对文章作者表示感谢。")])])},[],!1,null,null,null);s.default=e.exports}}]);