(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{337:function(t,a,s){"use strict";s.r(a);var e=s(40),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"tip custom-block"},[s("p",[t._v("今天把JS里的对象这节课给看完了，笔记倒是记了不少。不过视频里的东西虽然是看懂了，但是把我的乱七八糟的笔记整理起来倒是成了难题，我感觉这节课的知识在我这里现在暂时还没有形成体系。")])]),t._v(" "),s("p",[t._v("所以这次的博客我就趁热写了。主要目的还是通过写博客查资料的过程，把我今天学的知识里一些没明白的地方弄清楚。")]),s("div",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"20181017A/timg.jpg",alt:"趁热吃"}})]),s("p"),t._v(" "),s("h2",{attrs:{id:"全局对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 全局对象")]),t._v(" "),s("p",[t._v("全局对象（global）是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。所有属性都可以在程序的任何地方访问，即全局变量。在JavaScript中，通常window是全局对象，而Node.js的全局对象是global，所有全局变量都是全局对象的属性，如：console、process等。")]),t._v(" "),s("p",[t._v("每次在浏览器运行前都会生成一个global对象，在浏览器中默认全局对象为window。在浏览器环境中，直接使用一个未经定义的变量，如abc=1，那么abc这个变量自动声明为全局变量。变量引用自动挂载到了global对象，即window对象上。")]),t._v(" "),s("p",[t._v("window 就是一个哈希表，有很多属性。window 的属性就是全局变量，可以分为以下两类：")]),t._v(" "),s("p",[t._v("ES规定的，不管在什么浏览器下，全局对象里都有这些属性：")]),t._v(" "),s("ul",[s("li",[t._v("global.parseInt")]),t._v(" "),s("li",[t._v("global.parseFloat")]),t._v(" "),s("li",[t._v("global.Number")]),t._v(" "),s("li",[t._v("global.String")]),t._v(" "),s("li",[t._v("global.Boolean")]),t._v(" "),s("li",[t._v("global.Object")]),t._v(" "),s("li",[t._v("等等")])]),t._v(" "),s("p",[t._v("另一种是浏览器自己添加的私有属性，只有在某些浏览器里才可能有的属性。私有属性没有标准，在不同浏览器里的展示效果也不同：")]),t._v(" "),s("ul",[s("li",[t._v("window.alert")]),t._v(" "),s("li",[t._v("window.prompt")]),t._v(" "),s("li",[t._v("window.comfirm")]),t._v(" "),s("li",[t._v("window.console")]),t._v(" "),s("li",[t._v("window.document")]),t._v(" "),s("li",[t._v("等等")])]),t._v(" "),s("p",[t._v("其中document也是一个私有属性，意为文档。document代表能对文档所做的一切操作。ES并没有规定必须要有document，因此document是私有属性。document的规范为DOM，是W3C制定的。")]),t._v(" "),s("p",[t._v("上面只列出了非常少的API，可以在"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window",target:"_blank",rel:"noopener noreferrer"}},[t._v("Window - Web API 接口 | MDN"),s("OutboundLink")],1),t._v("里查看window的所有API。今天就从几种ES规定的构建函数来入手原型与原型链的知识。")]),t._v(" "),s("h2",{attrs:{id:"构建函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 构建函数")]),t._v(" "),s("p",[t._v("js中的对象分为两种：普通对象object和函数对象function。其中构建函数比如Function()、Object()、Number()等等都是函数对象。来看看构建对象的机制到底是怎样的。以Number()为例：")]),t._v(" "),s("h4",{attrs:{id:"_1、number"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、number","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、Number()")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("其中的new用于生成对象。")]),s("div",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"20181017A/001.png",alt:"图一"}})]),s("p"),t._v(" "),s("p",[t._v("上次博客画了很多内存图解来解决问题，上图是随便化的一张图，对象里面的值是随便写的。借助这个思想，这两行代码很容易地就能看出，n1与n2的在内存中的存放方式是不同的。n1是被封装为对象，对象中除了“1”之外，还有一些操作函数。")]),t._v(" "),s("h4",{attrs:{id:"_2、string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、string","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、String()")]),t._v(" "),s("p",[t._v("但是n2也可以调用toString函数：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("n2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toString    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//  "1"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("n2本来只是基本类型，基本类型是没有属性（key）的。因此在代码运行到n2.toString时，n2会被封装入一个临时对象（设为temp）中，这样temp中的内容与n1的内容是相似的，看一下此时n2的内存情况：")]),s("div",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"20181017A/002.png",alt:"图二"}})]),s("p"),t._v(" "),s("p",[t._v("因此，虽然n2本身没有toString()属性，但是通过这个临时对象temp，在n2使用toString时，会得到temp.toString()的值。因此n2也能够使用n1的所有操作函数。")]),t._v(" "),s("p",[t._v("temp是临时对象，再上述操作完成后会被销毁，如果再进行调用又是一个新的临时对象。来看一个例子：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xxx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xxx        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    undefined")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("因为有临时对象，一个普通类型才可以像对象一样引用属性。如上例，n.xxx=2完成后临时对象temp被回收，因此再调用n.xxx时，原来的n.xxx已经不存在了。")]),t._v(" "),s("p",[t._v("构建函数除了Number()，还有String()、Object()、Boolean()等，其在内存中的表现与Number()基本相似，如下面的几个例子：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ns1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//  "s"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("和之前讲到的例子一样，s1作为基本类型，在执行s1[0]时也调用了临时对象，讲到这里就顺便讲一下String里的一些操作函数：")]),t._v(" "),s("ul",[s("li",[t._v("String.anchor() 创造a标签")]),t._v(" "),s("li",[t._v("String.chatAt() 获取某一缩影对应字符")]),t._v(" "),s("li",[t._v("String.charCodeAt() 获取对应字符编码")]),t._v(" "),s("li",[t._v("String.concat() 连接两个字符串")]),t._v(" "),s("li",[t._v("String.endswith() 字符串以……结尾")]),t._v(" "),s("li",[t._v("String.trim() 裁剪字符两端空格")]),t._v(" "),s("li",[t._v("String.slice(a,b) 截断字符串")]),t._v(" "),s("li",[t._v("String.replace('a','b') 替换字符串中的'a'为'b'")])]),t._v(" "),s("h4",{attrs:{id:"_3、boolean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、boolean","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、Boolean()")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("上面是Boolean()将false封装为对象的例子。其中要注意b1是布尔值，为false；b2是对象，虽然是由false封装生成的，但是被视为true。")]),t._v(" "),s("h4",{attrs:{id:"_4、object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、object","aria-hidden":"true"}},[t._v("#")]),t._v(" 4、Object()")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("在这条例子里需要注意，s1与s2的内容并无区别，但是并不相等。事实上，所有新声明的对象都并不相等，除非引用地址相等。")]),t._v(" "),s("p",[t._v("上面提到的都是全局属性，但是在属性前都没有加window。是因为如果是window属性，前面的“window.”可以省略。如：")]),t._v(" "),s("blockquote",[s("p",[t._v("window.alert() => alert()")])]),t._v(" "),s("p",[t._v("上面提到的四条构造函数有个共同点，它们都有一些相同的操作函数，如toString()、valueof()等，为了节省内存，需要将这些共有的函数封装在一起。下面就讲一下这些共有属性会怎样存储。")]),t._v(" "),s("h2",{attrs:{id:"公用属性（原型）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#公用属性（原型）","aria-hidden":"true"}},[t._v("#")]),t._v(" 公用属性（原型）")]),t._v(" "),s("p",[t._v("为了节省内存，JS会将这些公用属性封装起来，对象中用继承属性“"),s("code",[t._v("__proto__")]),t._v('"这个key来指向共有的属性用一个例子来展示一下对象如何引用共有属性，内存图解及代码如下：')]),s("div",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"20181017A/003.png",alt:"图三"}})]),s("p"),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("从图中可以看出对象中只需要存储自己本身的内容与一个“"),s("code",[t._v("__proto__")]),t._v("”用来指向公用属性，它的值是公用属性的地址。其中Number、String、Boolean与Object的共同属性是不同的，所以Number的公有属性中需要一个“"),s("code",[t._v("__proto__")]),t._v("”用来指向Object的公用属性。")]),t._v(" "),s("p",[t._v("Object的公用属性是所有对象的共有属性。因为公用属性也被称为原型，因此这个由__proto__串起来的、直到Object的公用属性的"),s("code",[t._v("__proto__")]),t._v("（为null）的链叫就做原型链。")]),t._v(" "),s("h2",{attrs:{id:"原型对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型对象")]),t._v(" "),s("p",[t._v("下面就来探讨一下这些公用属性都在哪？在没有定义上述n、b、s、o这些对象时，又有哪些对象引用它们？如果没有对象引用这些公用属性，之前讲过，那这些属性就会被当成垃圾回收掉，这显然是不可能的。")]),t._v(" "),s("p",[t._v("首先这些公有属性称之为prototype，原型对象即是拥有prototype属性的对象。当声明对象时，JS引擎除了在堆内存中建立Hash，还将"),s("code",[t._v("__proto__")]),t._v("指向了这个对象该有的公用属性。")]),t._v(" "),s("p",[t._v("prototype在没写代码之前就已经存在浏览器当中。prototype是全局对象window的构建函数引用的属性。如String.prototype就是String公用属性的引用，正是因为这里引用了这些公用属性，因此这些公用属性才没有被回收掉。")]),t._v(" "),s("p",[t._v("那么继承属性"),s("code",[t._v("__proto__")]),t._v("与prototype之间又什么关系，用一个公式来解释其中的关系：")]),t._v(" "),s("blockquote",[s("p",[t._v("var 对象 = new 构建这个对象的函数()"),s("br"),t._v("\n对象."),s("code",[t._v("__proto__")]),t._v(" = 函数.prototype")])]),t._v(" "),s("p",[t._v("用自然语言来说就是，每个对象中都隐藏了一条"),s("code",[t._v("__proto__")]),t._v("属性，它指向构造它的函数的prototype。在上条公式中，"),s("code",[t._v("__proto__")]),t._v("是对象的属性，prototype是函数的属性。但是函数也是对象的一种，函数的"),s("code",[t._v("__proto__")]),t._v("又指向哪里呢？接着看几个例子：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("函数"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("protype\nFunction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("protype\nFunction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("protype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("protype\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("逐条分析一下：")]),t._v(" "),s("p",[t._v("因为函数是由Function构造出来的，因此函数."),s("code",[t._v("__proto__")]),t._v(" 指向Function.protype。")]),t._v(" "),s("p",[t._v("而Function本身也是函数，所以Function."),s("code",[t._v("__proto__")]),t._v("也指向Function.protype。")]),t._v(" "),s("p",[t._v("Function.protype即是Function的原型对象，因此Function.protype."),s("code",[t._v("__proto__")]),t._v("会指向Object.protype。")]),t._v(" "),s("p",[t._v("上面写的有点绕，再画一张内存图解来解释上面的那些关系：")]),s("div",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"20181017A/004.png",alt:"图四"}})]),s("p"),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("最后用一张我在别的地方找到的图来总结一下上面讲的一些概念：")]),s("div",{staticStyle:{"text-align":"center"}},[s("img",{attrs:{src:"20181017A/005.jpg",alt:"图五"}})]),s("p"),t._v(" "),s("p",[t._v("图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。")]),t._v(" "),s("p",[t._v("每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是平时所说的原型，每一个对象都会从原型”继承”属性。")]),t._v(" "),s("p",[t._v("所有对象都有"),s("code",[t._v("__proto__")]),t._v("属性，prototype属性只有函数对象有。实例的"),s("code",[t._v("__proto__")]),t._v("指向构造函数的prototype。普通函数的prototype属性指向了一个对象，这个对象正是调用该构造函数而创建的实例的原型。")]),t._v(" "),s("p",[t._v("今天这个博客写完我仍然不能说我就是搞清楚原型与原型链这个知识点，看来以后还要回来把这里完善一下。在博客编写过程中，以下内容带给我了一些启发，在此鸣谢：")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/chuaWeb/p/5039232.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("js基础篇——原型与原型链的详细理解"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://web.jobbole.com/91207/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 深入之从原型到原型链"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes",target:"_blank",rel:"noopener noreferrer"}},[t._v("对象原型 - 学习 Web 开发|MDN"),s("OutboundLink")],1)])])])},[],!1,null,null,null);a.default=n.exports}}]);