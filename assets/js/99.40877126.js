(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{410:function(s,t,a){"use strict";a.r(t);var n=a(40),e=Object(n.a)({},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("div",{staticClass:"tip custom-block"},[a("p",[s._v("今天早上来到公司吧这篇博客的头起一下，当然今天是不可能写完的了，计划是在周六之前写完吧，利用这几天工作日的一些碎片时间。看看这次的挑战能不能够完成吧。")])]),s._v(" "),a("p",[s._v("这次的博客内容仍然是之前课上的内容，因为比较多，所以分作两篇博客来写。也算是给我充实篇数找了理由吧。本篇的主题主要是 JavaScript 函数的递归与迭代，以及其他的一些相关内容。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20190825A/1.jpg",alt:"迭代"}})]),a("p"),s._v(" "),a("h2",{attrs:{id:"一、普通递归与爆栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、普通递归与爆栈","aria-hidden":"true"}},[s._v("#")]),s._v(" 一、普通递归与爆栈")]),s._v(" "),a("p",[s._v("递归其实是很常识的内容了，不过因为在博客里面似乎没有专门讲过，所以这回稍微讲一下。至于调用栈是什么，早在最开始学函数的时候，就已经有所了解了，还是在"),a("a",{attrs:{href:"/1810/20181030A"}},[s._v("这篇博客")]),s._v("里，当时是这样介绍调用栈的：")]),s._v(" "),a("blockquote",[a("p",[s._v("调用栈（call stack）就是在每一个函数执行之前都会把这个函数的地址记入stack中，函数return时再回到这个stack地址。什么意思呢，之前讲到过栈的概念，函数的执行也是一样，遵守先进后出的规则。每次开始执行一个函数就将这个函数的地址放入栈中，在执行的过程中如果又触发了一个函数，就再将这个函数的地址也推入栈中。等到函数执行完毕，再把这个函数的地址从栈中取出。而最先执行的函数因为放在栈的底部，所以要在最后才能取出。")])]),s._v(" "),a("p",[s._v("还附了一张图，可以说是超级明白了，可惜我博客写完就忘了，也没有会看，惭愧惭愧：")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20190825A/001.png",alt:"压栈"}})]),a("p"),s._v(" "),a("p",[s._v("调用栈大概就是这么回事，刚学的时候觉得好厉害，现在觉得就那样。再回头看看递归，这里举一个简单的例子:")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("j")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v("\n    n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("j")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("我从来没有写过这样的函数，这个函数写得非常简练，叫我来写肯定复杂得多，但也更明白些。这实际上是阶乘的函数，得益于递归的操作才能这么简洁，以至于看起来就像函数还没有声明完，就自己调用自己了。这也是递归操作的一个特点吧，不断地自己调用自己。用刚才讲的调用栈来分析这个函数，实际上递归就是不断操作调用栈的过程。假设要求 4 的阶乘，这时就要依次计算这几个结果："),a("code",[s._v("4 * j(3)")]),s._v("、"),a("code",[s._v("3 * j(2)")]),s._v("、"),a("code",[s._v("2 * j(1)")]),s._v("、"),a("code",[s._v("1")]),s._v("。这是一个不断「递进」的过程，直到取到具体的数值，再不断地「回归」原来的算式，进行求和。这大概就是递归为什么被称为「递归」的原因吧。")]),s._v(" "),a("p",[s._v("但是这样下去也会出问题，这里只是 4 的阶乘，而且也只是单线操作，用到的栈不多，如果函数复杂些，递归的层级再深一些，调用栈也会有不够用的时候。上面提到的我的博客也讲到了这个问题：")]),s._v(" "),a("blockquote",[a("p",[s._v("刚才说到在函数执行的过程中也会触发函数执行，如果这种嵌套执行函数的层数越来越多，往调用栈里存放的地址也会越来越多。如果到了一个极限，浏览器是会报错的。这种情况称之为stack overflow，即栈溢出。")])]),s._v(" "),a("p",[s._v("来一个更复杂一点的例子，大名鼎鼎的斐波那契数列：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("fib")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" \n    n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fib")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fib")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这个函数很简洁。可以看出，斐波那契数列里每一项都是这一项前两项之和。如果要求"),a("code",[s._v("fib(10)")]),s._v("，那就要求"),a("code",[s._v("fib(9)")]),s._v("和"),a("code",[s._v("fib(8)")]),s._v("；要求"),a("code",[s._v("fib(9)")]),s._v("，那就要求"),a("code",[s._v("fib(8)")]),s._v("和"),a("code",[s._v("fib(7)")]),s._v("，而且那边求"),a("code",[s._v("fib(8)")]),s._v("也要像这样算一遍。有点像是一个树形结构，要把所有的叶子节点的结果都算出来，才能取得最终的结果。这样下来，调用栈的负担就重了很多。如果求斐波那契的数值非常大的时候，就会爆栈了。我公司的电脑试着求"),a("code",[s._v("fib(100)")]),s._v("，似乎有点困难了，不管会不会爆栈，边跑边写博客吧。")]),s._v(" "),a("p",[s._v("这样看起来递归也太垃圾了，怎么样才能改善这种情况呢？这里有几种方法。")]),s._v(" "),a("h2",{attrs:{id:"二、尾递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、尾递归","aria-hidden":"true"}},[s._v("#")]),s._v(" 二、尾递归")]),s._v(" "),a("p",[s._v("尾递归是之前没有听说过的新名词，直接来看一下百度百科，他这里讲得还算清楚：")]),s._v(" "),a("blockquote",[a("p",[s._v("如果一个函数中所有递归形式的调用都出现在函数的末尾，则称这个递归函数是尾递归的。当递归调用是整个函数体中最后执行的语句且它的返回值不属于表达式的一部分时，这个递归调用就是尾递归。")])]),s._v(" "),a("p",[s._v("通俗地讲，就是将每次函数的返回值都只是一个递归操作，而不是含有递归操作的表达式。这样做的好处是，每次都可以使用行的返回值代替旧的值，最后一步的返回值直接就是最终结果，免去了「回归」的过程。遵照尾递归的思想，斐波那契的例子可以这样优化：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("fib")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("f_inner")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" prev1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" prev2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v("\n        start "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" end "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" prev1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" prev2 \n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("finner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("start "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" prev1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" prev2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" prev1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f_inner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("这里的计算思路是这样的，从第三项开始，一项一项地求和，最终得到最后的结果，假设要求"),a("code",[s._v("fib(5)")]),s._v("的值，大概就是这样的迭代过程："),a("code",[s._v("f_inner(2, 5, 1, 0)")]),s._v("、"),a("code",[s._v("f_inner(3, 5, 1, 1)")]),s._v("、"),a("code",[s._v("f_inner(4, 5, 2, 1)")]),s._v("、"),a("code",[s._v("f_inner(5, 5, 3, 2)")]),s._v("、"),a("code",[s._v("5")]),s._v("，节省了大量的运算过程。尾递归的好处是，它可以避免递归调用期间栈空间开销的累积，因为系统可以为每个递归调用重用栈中的固定空间。然而，并非所有的语言都支持尾递归优化，JavaScript 即在此列，虽然已经不需要将什么内容压入栈中，但是 JavaScript 还是会执行压栈操作，将一些环境压入栈中。")]),s._v(" "),a("h2",{attrs:{id:"三、记忆化与递归与-react"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、记忆化与递归与-react","aria-hidden":"true"}},[s._v("#")]),s._v(" 三、记忆化与递归与 React")]),s._v(" "),a("p",[s._v("如果要用循环来实现斐波那契数列应该怎么做？循环大家就更清楚了，直接上代码：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("fib")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" array "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("上面那个使用递归计算"),a("code",[s._v("fib(100)")]),s._v("现在也没有计算出来，估计就是爆栈了吧。但是用循环的方法计算，瞬间就能得出结果，是"),a("code",[s._v("218922995834555200000")]),s._v("，挺大的。为什么循环比递归要快，是因为需要计算的内容都被存入数组当中。事实上，"),a("code",[s._v("fib(100)")]),s._v("在这里也就计算了 98 次而已。")]),s._v(" "),a("p",[s._v("造成递归效率低的原因就是重复计算了许多值。如果使用哈希把计算过的值存起来，就可以大大减少压栈的次数，起到优化递归的作用。这叫做记忆化，维基百科上这样介绍：")]),s._v(" "),a("blockquote",[a("p",[s._v("在计算机领域，记忆化是一种主要用来提升计算机程序速度的优化技术方案。它将开销较大的函数调用的返回结果存储起来，当同样的输入再次发生时，则返回缓存好的数据，以此提升运算效率。")])]),s._v(" "),a("p",[s._v("记忆化也是 React 的一种优化手段。"),a("code",[s._v("React.memo")]),s._v(" 为高阶组件。它与 "),a("code",[s._v("React.PureComponent")]),s._v(" 非常相似，但它适用于函数组件，但不适用于 class 组件。")]),s._v(" "),a("p",[s._v("如果你的函数组件在给定相同 props 的情况下渲染相同的结果，那么你可以通过将其包装在 "),a("code",[s._v("React.memo")]),s._v(" 中调用，以此通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。")]),s._v(" "),a("p",[s._v("默认情况下其只会对复杂对象做浅层对比，如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" MyComponent "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("memo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("MyComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("props")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 使用 props 渲染 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("YourComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("props")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 使用 props 渲染 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("areEqual")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("prevProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nextProps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n  如果把 nextProps 传入 render 方法的返回结果与\n  将 prevProps 传入 render 方法的返回结果一致则返回 true，\n  否则返回 false\n  */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("memo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("YourComponent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" areEqual"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("这里需要注意的是，如果传入的 props 是匿名函数的话，每次函数都会重新生成，导致每次都是对比出不同的 props。此外，如果是在函数组件内部声明的函数变量，把这个变量作为 props 传给子组件时，尽管不是匿名函数，也是会认为是不同的结果。因为函数组件每次执行，其内部的变量都会以新的地址生成，而"),a("code",[s._v("React.memo")]),s._v("只做浅层对比。")]),s._v(" "),a("p",[s._v("如果想要避免这种情况，可以使用 Hook API 中的"),a("code",[s._v("useCallback")]),s._v("。"),a("code",[s._v("useCallback")]),s._v("返回一个 memoized 回调函数。把内联回调函数及依赖项数组作为参数传入 "),a("code",[s._v("useCallback")]),s._v("，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 "),a("code",[s._v("shouldComponentUpdate")]),s._v("）的子组件时，它将非常有用。例如，下面的函数只有在依赖项"),a("code",[s._v("a")]),s._v("或"),a("code",[s._v("b")]),s._v("发生变化时才会更新：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" memoizedCallback "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("useCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("依赖项数组不会作为参数传给回调函数。虽然从概念上来说它表现为：所有回调函数中引用的值都应该出现在依赖项数组中。")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("以上就是本篇博客关于递归的所有内容了，应该也是比较基础的。这两天不是很忙，所以竟然利用上班时间摸鱼来写博客，实在是罪不可恕。原本计划是把高阶函数和柯里化的内容也放在一起写，结果没想到光递归与迭代就写了一百多行，而且感觉柯里化与这里也不是特别相关，干脆周六再来写吧，上班博客双倍摸鱼。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20190825A/timg.jpg",alt:"好多鱼"}})]),a("p")])},[],!1,null,null,null);t.default=e.exports}}]);