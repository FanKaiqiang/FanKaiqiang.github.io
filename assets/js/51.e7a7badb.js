(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{361:function(s,e,t){"use strict";t.r(e);var n=t(40),o=Object(n.a)({},function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"tip custom-block"},[t("p",[s._v("今天就不写JS押题相关的知识了，整理一下以前的笔记，调节一下思路。")])]),s._v(" "),t("p",[s._v("之前我参加的那个笔试，里面正好问到了Cookies与LocalStorage的相关问题。当时心想还好我已经学掉了这些知识，不至于见到这个问题一点都不知道。但是遗憾的是这些之前学过的知识我只记得个六七分了，学完之后没有复习，忘记了不少，今天就先来整理一下Session的相关知识。")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181124A/timg.jfif",alt:"遗忘"}})]),t("p"),s._v(" "),t("h2",{attrs:{id:"session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session","aria-hidden":"true"}},[s._v("#")]),s._v(" Session")]),s._v(" "),t("h3",{attrs:{id:"cookie的不安全性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie的不安全性","aria-hidden":"true"}},[s._v("#")]),s._v(" Cookie的不安全性")]),s._v(" "),t("p",[s._v("之前写过关于Cookie的博客，大概过了一遍Cookie的知识，其中是这样介绍的Cookie：")]),s._v(" "),t("blockquote",[t("p",[s._v("Cookie，有时也用其复数形式 Cookies，指某些网站为了辨别用户身份、进行 Session 跟踪而储存在用户本地终端上的数据（通常经过加密）。")])]),s._v(" "),t("p",[s._v("之前也讲过，Cookie是存储在本地的文件，是可以被用户篡改的，如果要用Cookie直接保存一些敏感信息是不够安全的。假设需要将一个用户的登录信息保存起来，方便下次用户登录时免于再次输入。之前讲登录注册功能的时候了解到，借助Cookie可以实现这个功能，来回顾一下Cookie的一些特点：")]),s._v(" "),t("ol",[t("li",[s._v("服务器通过Set-Cookie响应头设置Cookie")]),s._v(" "),t("li",[s._v("浏览器得到Cookie后，在以后的每次请求中都会带上Cookie")]),s._v(" "),t("li",[s._v("服务器读取Cookie就知道登录用户的信息")])]),s._v(" "),t("p",[s._v("如果服务器在返回响应给请求方时，在响应头中添加了“Set-Cookie”这一项，Cookie的内容就是用户的登录信息。从此以后每当请求方（相同的源）给服务器发送请求时，都要在请求头中加上Cookie的内容。这样服务器在每次接受来自该用户的请求时，只需要获取到Cookie的内容并将之进行解析，就可以得到相应的用户信息了。")]),s._v(" "),t("p",[s._v("Cookie是将信息都存放在客户端的浏览器内存或磁盘中，所以不是很安全，别人可以分析存放在本地的Cookie数据来进行用户信息的盗窃或进行Cookie欺骗。因此使用Cookie存放这些信息是不够是不安全的。")]),s._v(" "),t("p",[s._v("这时候就要讲到Session，借助Session就可以实现将Cookie需要存放的信息加密的效果。那么Session又是什么呢？这次博客就要把Session的问题搞清楚。")]),s._v(" "),t("h3",{attrs:{id:"session的机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session的机制","aria-hidden":"true"}},[s._v("#")]),s._v(" Session的机制")]),s._v(" "),t("p",[s._v("Session 被称为“会话控制”。Session的实质是存放在服务器中的对象。Session 对象存储特定用户会话所需的属性及配置信息。Session 对象最常见的一个用法就是存储用户的首选项。其具有如下特点")]),s._v(" "),t("ul",[t("li",[s._v("当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。")]),s._v(" "),t("li",[s._v("当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。")]),s._v(" "),t("li",[s._v("当会话过期或被放弃后，服务器将清理该Session对象。")])]),s._v(" "),t("p",[s._v("再来说一下Session的机制。Session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。Session通信的一般实现形式是通过Cookie来实现，与Cookie不同的是，Session只会保存一个SessionID在客户端，不会像Cookie那样将具体的数据保存在客户端，Session具体的数据只会保存在服务端上。下面是关于Session机制的一张图解，图片可能不是很清楚，下面也有文字解释：")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181124A/001.JPG",alt:"遗忘"}})]),t("p"),s._v(" "),t("p",[s._v("当程序需要为某个浏览器的请求创建一个Session时，服务器首先检查这个浏览器的请求里是否已包含了一个Session标识（称为Session id），如果已包含则说明以前已经为此浏览器创建过Session，服务器就按照Session id把这个Session检索出来使用（检索不到，会新建一个），如果浏览器请求不包含Session id，则为此浏览器创建一个Session并且生成一个与此Session相关联的Session id。下面是一个借助Session实现Cookie加密的大致示例：")]),s._v(" "),t("div",{staticClass:"language-JavaScript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//服务器端设置Cookie")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" SessionId "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Math"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("random")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("\nSession"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SessionId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("sign"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("email "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" email"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nresponse"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setHeader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Set-Cookie'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token template-string"}},[t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("SessionId=")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("${")]),s._v("SessionId"),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("}")])]),t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("上面的代码就有一个生成Session id的过程，这个Session id是通过随机数产生的。Session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这样才能保证Session中存放数据的安全性。然后这个Session id被作为响应头被服务器返回给浏览器保存。上面是采用Cookie来保存这个Session id的，这样在之后的请求中浏览器会把这个Cookie发送给服务器。一般这个Cookie的名字都是类似于SessionId。")]),s._v(" "),t("p",[s._v("当浏览器向服务器请求对应的保存在Session的信息时候，服务器就会读取请求头中刚才保存在Cookie中对应的SessionID，并与服务器此前为该浏览器创建的SessionID进行对比，如果相同就能取出你想要的信息，不能就不能取出。实际上在上面代码例子中就是以SessionId为key、以存放的数据为value，在Session对象中存放信息。由于SessionId是借由随机数产生的，这样Cookie中的内容就是一串随机数，实现了不可伪造的效果，但是用户仍然可以借助这串SessionId在Session获取到自己需要的信息。")]),s._v(" "),t("p",[s._v("最后再把Session机制的整个过程过一遍：")]),s._v(" "),t("ol",[t("li",[s._v("服务器将Sessionid（随机数）通过Cookie发给客户端；")]),s._v(" "),t("li",[s._v("客户端访问服务器时，服务器读取Cookie中的Sessionid；")]),s._v(" "),t("li",[s._v("服务器中有一块内存（对象）保存了所有Session；")]),s._v(" "),t("li",[s._v("通过Sessionid，可以得到存放在Session对象的用户隐私信息。")])]),s._v(" "),t("h3",{attrs:{id:"session的清理与存放"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session的清理与存放","aria-hidden":"true"}},[s._v("#")]),s._v(" Session的清理与存放")]),s._v(" "),t("p",[s._v("Cookie与Session最大的区别就是一个是将数据存放在客户端，一个是将数据存放在服务端，因此Session 安全性要比Cookie高。所以Session 被应用于储存一些比较隐私的数据，例如用户名密码和用户的资料等。但是也正因为如此，当访问增多、会比较占用你服务器的性能时，考虑到减轻服务器性能方面，应当使用Cookie。")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181124A/002.jfif",alt:"Cookie"}})]),t("p"),s._v(" "),t("p",[s._v("一般情况下，Session都是存储在内存里，当服务器进程被停止或者重启的时候，内存里的Session也会被清空。关于Session的删除，常常有一种误解「只要关闭浏览器，Session就消失了」。事实上除非程序通知服务器删除一个Session，否则服务器会一直保留这个Session。而且然而浏览器从来不会主动在关闭之前通知服务器它将要关闭，因此服务器根本不会有机会知道浏览器已经关闭。")]),s._v(" "),t("p",[s._v("恰恰是由于关闭浏览器不会导致Session被删除，迫使服务器为seesion设置了一个失效时间，当距离客户端上一次使用Session的时间超过这个失效时间时，服务器就可以认为客户端已经停止了活动，才会把Session删除以节省存储空间。如果在服务器关闭前将Session中的内容保存到硬盘上，当服务器进程重新启动或这些信息将能够被再次使用。")]),s._v(" "),t("p",[s._v("之所以会有这种错觉，是大部分Session机制都使用会话Cookie来保存Session id，而关闭浏览器后这个Session就消失了，再次连接服务器时也就根据Cookie中的Session id无法找到原来的Session。那么Session机制还有其他方式可以用来存放Session id吗？")]),s._v(" "),t("p",[s._v("Session大部分时候都是基于Cookie存储Session id的，但是借助查询参数和LocalStorage也可以存储Session id，就像这样：")]),s._v(" "),t("div",{staticClass:"language-JavaScript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//借助查询参数")]),s._v("\nwindow"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("location"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("href "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token template-string"}},[t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("/?SessionId=")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("${")]),s._v("Object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("SessionId"),t("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("}")])]),t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//借助LocalStorage")]),s._v("\nlocalStorage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setItem")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SessionId'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("Object"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("SessionId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("除此之外，还可以直接将Session id作为响应体的内容，以JSON的形式传给浏览器。Session有很多种不基于Cookie的方法，但是因为Cookie没有其他多余的操作，可以直接读取与使用，并且每次浏览器的请求都会自动带上Cookie，所以使用Cookie是最方便的，也是最为常用的。")]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("完成于 2018年11月26日 09:42:55")]),s._v(" "),t("p",[s._v("本篇博客中关于Session的部分就告一段落了。这篇博客本来我前天就像写掉，但是因为自己之前学的基本都要忘了，网上查的资料一时也没看懂，直到现在，才算是对Session有一个较为清晰的认识。至于LocalStorage的部分，本想在这篇一起写了，但是光Session就写了这么多，所以今晚再来写LocalStorage的部分了。")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181124A/003.jfif",alt:"康庄大道"}})]),t("p"),s._v(" "),t("p",[s._v("以下是本文编写过程中查阅过的参考资料，在此鸣谢：")]),s._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://baijiahao.baidu.com/s?id=1585166201643637510&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"}},[s._v("Session简介"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/shiyangxt/articles/1305506.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("cookie 和session 的区别详解 - 施杨 - 博客园"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/lonelydreamer/p/6169469.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Session机制详解 - lonelydreamer - 博客园"),t("OutboundLink")],1)])])])},[],!1,null,null,null);e.default=o.exports}}]);