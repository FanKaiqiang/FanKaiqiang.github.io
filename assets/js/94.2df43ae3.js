(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{404:function(t,e,a){"use strict";a.r(e);var T=a(40),r=Object(T.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("再编辑于 2020-3-12 14:50:18")]),t._v(" "),a("p",[t._v("今天是植树节，前几天工作上的事情比较忙，连续两个周六都来公司补班了，有一段时间没空写博客了。正好今天下午不是那么忙，就想着把之前 HTTP 深入浅出课程的最后一可笔记整理一下，这个课程看了整整一年才看完属实惭愧。本来想开一篇新的博客，结果看到之前已经写了一篇关于 HTTP 发展历程的博客，这回干脆就把这篇博客强化强化得了。")])]),t._v(" "),a("p",[t._v("这段时间一直都在忙找工作的事情，博客这方面也疏于照应。这几天过得有点疲塌，虽然拿到了 offer 也不能懈怠，希望这几天也能过继续开始继续写博客的习惯，只有保持积累才能提高吧。今天水一篇比较简单地博客吧，也是面试当中面过的，一个比较简单的知识点——HTTP 协议的发展历程。或者是说，HTTP 1.0、HTTP 1.1、HTTP 2.0 之间到底有什么区别？")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"https://s1.ax1x.com/2020/03/12/8ZXvJ1.jpg",alt:"HTTP"}})]),a("p"),t._v(" "),a("h2",{attrs:{id:"一、http-协议的发展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、http-协议的发展","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、HTTP 协议的发展")]),t._v(" "),a("p",[t._v("HTTP 是 Hyper Text Transfer Protocol（超文本传输协议）的缩写，是应用层的协议，也是一种无状态、无连接的应用层协议。同其他应用层协议一样，是为了实现某一类具体应用的协议，并由某一运行在用户空间的应用程序来实现其功能。HTTP 是一种会不断更新的、记录在文档上的协议规范，这种规范从早期版本的 HTTP，到 HTTP 1.1，再到现在的 HTTP 2.0，扩展时间已经超过15年。")]),t._v(" "),a("h3",{attrs:{id:"_1、http-1-0-到-http-1-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、http-1-0-到-http-1-1","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、HTTP 1.0 到 HTTP 1.1")]),t._v(" "),a("p",[t._v("在 HTTP 1.0 中，浏览器的每次请求都需要与服务器建立一个 TCP 连接（三次握手），服务器处理完成后立即断开 TCP 连接（四次挥手），这样每次建立的连接只包含一个请求与响应，而 TCP 的连接释放过程又是比较费事的。这种无连接的特性会使得网络的利用率非常低。此外，在 HTTP 1.0 中不支持请求的流水操作，下一个请求必须要等待上一个响应收到之后才发送，如果前一个响应一直不到达，就可能会造成整个浏览器与服务器交互的阻塞。自1995年开始，即HTTP/1.0文档发布的下一年，就开始修订HTTP的第一个标准化版本。在1997年初，HTTP 1.1 标准发布，就在HTTP/1.0 发布的几个月后。")]),t._v(" "),a("p",[t._v("HTTP 1.1 对 HTTP 1.0 进行了改进。首先 TCP 连接可以复用，一次连接中可以有多个请求响应（对应多个资源）。首先是长连接，HTTP 1.1 增加了一个 Connection 字段，通过设置 Conection: keep-alive 使客户端道服务器端连接持续有效，即不关闭底层的 TCP 连接，当出现对服务器的后继请求时，keep-alive 功能避免重新建立连接。如果客户端想关闭 HTTP 连接，可以在请求头中携带 Connection: false 来告知服务器关闭请求。这样只要建立连接，之后就可以一次性发送对更多资源的请求了。")]),t._v(" "),a("p",[t._v("其次是 HTTP 1.1 支持请求管道化（pipelining）。管线化后，请求和响应不再是依次交替的了。他可以支持一次性发送多个请求，并一次性接收多个响应。这样下一个请求就不用等到收到上一个响应再发出了。需要注意的是，服务器必须按照客户端请求的先后顺序依次回送相应的结果，以保证客户端能够区分出每次请求的响应内容。此外，只有 get 与 head 请求可以进行管线化，而 POST 有限制；初次创建连接时不应该启动管线机制，因为服务器不一定支持该协议。")]),t._v(" "),a("p",[t._v("除此之外，比较重要的是 HTTP 1.1 引入了额外的缓存控制机制（强缓存、协商缓存）、内容协商机制（客户端申明语言，编码，类型等限制，服务端再进行判断）。")]),t._v(" "),a("h3",{attrs:{id:"_2、http-1-1-到-http-2-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、http-1-1-到-http-2-0","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、HTTP 1.1 到 HTTP 2.0")]),t._v(" "),a("p",[t._v("HTTP 协议已经稳定使用超过 15 年了。经过了这些年的检验，可以发现在 1997 年颁布的 HTTP 1.1 标准还是存在许多问题是可以完善的。举例来说：")]),t._v(" "),a("ul",[a("li",[t._v("每次请求/响应的头部有过多的冗余重复内容；")]),t._v(" "),a("li",[t._v("请求/响应头部太大，未经压缩就发送；")]),t._v(" "),a("li",[t._v("数据压缩并非强制，可能存在未压缩的情况（响应体）；")]),t._v(" "),a("li",[t._v("客户端可以根据 HTML 解析发送一个个的请求，服务器却不能据此做出响应；")]),t._v(" "),a("li",[t._v("客户端不能预先请求将要使用的内容；")]),t._v(" "),a("li",[t._v("每个域名的并发请求数量有已经限制，超过限制则会阻塞；")]),t._v(" "),a("li",[t._v("服务器不能主动发起请求；")]),t._v(" "),a("li",[t._v("请求顺序没有优先级，只能根据在 HTML 中的顺序决定；")]),t._v(" "),a("li",[t._v("……")])]),t._v(" "),a("p",[t._v("在2010年到2015年，谷歌通过实践了一个实验性的 SPDY 协议（谐音 speedy），其收集了浏览器和服务器端的开发者的焦点问题。明确了响应数量的增加和解决复杂的数据传输，SPDY 在 2015 年停用，被最终演化为 HTTP 2.0。HTTP 2.0 相比于 HTTP 1.X，可以说是大幅度提高了 web 的性能。HTTP2.0的新特性大致如下：")]),t._v(" "),a("h4",{attrs:{id:"_1、二进制传输"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、二进制传输","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、二进制传输")]),t._v(" "),a("p",[t._v("HTTP 2.0 中所有加强性能的核心点在于此。在之前的 HTTP 版本中，是通过文本的方式传输数据。在 HTTP 2.0 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。HTTP2.0 通过在应用层和传输层之间增加一个二进制分帧层，突破了HTTP1.1的性能限制、改进传输性能。")]),t._v(" "),a("h4",{attrs:{id:"_2、多路复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、多路复用","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、多路复用")]),t._v(" "),a("p",[t._v("多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。")]),t._v(" "),a("p",[t._v("另外，多路复用（连接共享）可能会导致关键请求被阻塞。HTTP2.0里每个数据流都可以设置优先级和依赖，优先级高的数据流会被服务器优先处理和返回给客户端，数据流还可以依赖其他的子数据流。")]),t._v(" "),a("p",[t._v("可见，HTTP2.0实现了真正的并行传输，它能够在一个TCP上进行任意数量HTTP请求。而这个强大的功能则是基于“二进制分帧”的特性。")]),t._v(" "),a("h4",{attrs:{id:"_3、头部压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、头部压缩","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、头部压缩")]),t._v(" "),a("p",[t._v("在 HTTP 1.X 中，使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。")]),t._v(" "),a("p",[t._v("在 HTTP 2.0 中，使用了 encoder 压缩格式对传输的 header 进行编码，减少了 header 的大小。并在两端维护了索引表，用于记录出现过的 header ，既避免了重复header的传输，又减小了需要传输的大小。高效的压缩算法可以很大的压缩header，减少发送包的数量从而降低延迟。")]),t._v(" "),a("h4",{attrs:{id:"_4、服务端推送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、服务端推送","aria-hidden":"true"}},[t._v("#")]),t._v(" 4、服务端推送")]),t._v(" "),a("p",[t._v("服务器除了对最初请求的响应外，服务器还可以额外的向客户端推送资源，而无需客户端明确的请求。可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端推送的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。")]),t._v(" "),a("h2",{attrs:{id:"二、双工通信-——-轮询、长轮询、websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、双工通信-——-轮询、长轮询、websocket","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、双工通信 —— 轮询、长轮询、WebSocket")]),t._v(" "),a("p",[t._v("在前文提到，HTTP 2.0 提到了服务器推送（Server Push）的新特性。服务器推送指的是，还没有收到浏览器的请求，服务器就把各种资源推送给浏览器。一个服务器经常知道一个页面需要很多附加资源，在它响应浏览器第一个请求的时候，可以开始推送这些资源。这允许服务端去完全充分地利用一个可能空闲的网络，改善页面加载时间。在标准的HTTP请求响应语义中，浏览器发起请求，服务器发送一个响应，这意味着在浏览器发起新请求前，服务器不能发送新信息给客户端浏览器。本节将简单介绍几种客户端与服务器之间双工通信的几种方法，并非 HTTP 2.0 的服务器推送机制。")]),t._v(" "),a("h3",{attrs:{id:"_1、ajax-轮询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、ajax-轮询","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、Ajax 轮询")]),t._v(" "),a("p",[t._v("Ajax 短轮询是服务器收到请求后，不管是否有数据到达都直接响应该请求；如果浏览器收到的数据为空，则隔一段时间，浏览器又会发送相同的请求到服务器，以获取数据响应。这种方式的优点在于代码简单，但缺点也非常明显，如果轮询的时间长，客户端不断发起请求，造成性能的浪费，而且信息交互的实时性较低。")]),t._v(" "),a("h3",{attrs:{id:"_2、ajax-长轮询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、ajax-长轮询","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、Ajax 长轮询")]),t._v(" "),a("p",[t._v("Ajax 长轮询是服务器收到请求后如果有数据，就立刻响应请求，如果没有数据就会停留一段时间。这段时间内，如果服务器请求的数据到达（如查询数据库或数据的逻辑处理完成），就会立刻响应；如果这段时间过后，还没有数据到达，则以空数据的形式响应该请求；若浏览器收到的数据为空，会再次发送同样的请求到服务器。")]),t._v(" "),a("p",[t._v("以上两种轮询方式都是对 HTTP 协议的应用，并未实现真正的服务器推送。从这里可以看出，不管是长轮询还是短轮询，都不太适用于客户端数量太多的情况，因为每个服务器所能承载的TCP连接数是有上限的，这种轮询很容易把连接数顶满。")]),t._v(" "),a("h3",{attrs:{id:"_3、websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、websocket","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、WebSocket")]),t._v(" "),a("p",[t._v("WebSocket 可以实现与客户端与服务器双向，基于消息的文本或二进制数据通信，主要包括两个部分，客户端 WebSocket API 及 WebSocket 协议。WebSocket 是 HTML5 规范发布的新协议，和  HTTP 协议完全是两个不同的概念，或者说基本没关系。WebSocket 协议和 HTTP 协议的唯一联系点在于，WebSocket 协议为了兼容现有浏览器的握手规范而采用了 HTTP 协议中的握手规范，以建立WebSocket 连接。")]),t._v(" "),a("p",[t._v("利用HTTP完成握手有几个好处。首先，让 WebSockets 与现有 HTTP 基础设施兼容：WebSocket 服务器可以运行在 80 和 443 端口上，这通常是对客户端唯一开放的端口。其次，让可以重用并扩展HTTP 的 Upgrade 流，为其添加自定义的 WebSocket 首部，以完成协商。最后，前述握手完成后，如果握手成功，该连接就可以用作双向通信信道交换 WebSocket 消息。到此，客户端与服务器之间不会再发生 HTTP 通信，一切由 WebSocket 协议接管。")]),t._v(" "),a("p",[t._v("使用 WebSocket 协议进行的通信是真正的全双工通信。无需循环等待（长轮询），CPU和内存资源不以客户端数量衡量，而是以客户端事件数衡量，与之前提到的轮询相比性能更佳。")]),t._v(" "),a("h2",{attrs:{id:"三、http-与-https-的区别（题外话）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、http-与-https-的区别（题外话）","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、HTTP 与 HTTPS 的区别（题外话）")]),t._v(" "),a("p",[t._v("HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。")]),t._v(" "),a("p",[t._v("简单来说，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比 http 协议安全。")]),t._v(" "),a("p",[t._v("HTTPS和HTTP的区别主要如下：")]),t._v(" "),a("pre",[a("code",[t._v("1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。\n\n2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。\n\n3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n\n4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。\n")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("今天的博客可以说是超级水了，不过好歹也是面试题的一个简单总结，下次被问到这个问题不至于一无所知。至于博客的撰写，感觉能保持下来就很不错了。希望自己之后的求职历程能够顺利吧。")]),t._v(" "),a("p",[t._v("**补充于 2020-3-12 17:56:58：**这篇博客再之前写得确实很水，这次的补充其实也比较水。但是补充之后，感觉整篇博客确实强大了不少，不过这节课的内容本身就不是很多就是了。也算是完成了这个星期的博客任务了。这节课是大概一个月前看的，其实到现在已经忘记不少，这方面的知识说实话我本身就不甚了解，如果现在不复习一下，估计也马上要忘光了。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"https://s1.ax1x.com/2020/03/12/8eICFK.jpg",alt:"遗忘"}})]),a("p"),t._v(" "),a("p",[t._v("本次博客的编写过程中，感谢以下博客给我的带来的启发：")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://blog.csdn.net/Richardlygo/article/details/81876331",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP1.0 HTTP1.1 HTTP2.0 主要特性对比"),a("OutboundLink")],1),t._v("；")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/wqhwe/p/5407468.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP与HTTPS的区别"),a("OutboundLink")],1),t._v("；")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/baidu_38990811/article/details/79172163",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ajax轮询,Ajax长轮询和websocket(详细使用)_网络_街角有人祝福,巷口有人哭~-CSDN博客"),a("OutboundLink")],1),t._v(";")])])])},[],!1,null,null,null);e.default=r.exports}}]);