(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{393:function(t,a,e){"use strict";e.r(a);var r=e(40),i=Object(r.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("div",{staticClass:"tip custom-block"},[e("p",[t._v("本篇博客主要是对我学习 React 后创作的一个小作品的介绍，欢迎大家吐槽。")])]),t._v(" "),e("p",[e("strong",[t._v("合理地安排自己的工作与生活吧！")])]),t._v(" "),e("h2",{attrs:{id:"franko-to-do-list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#franko-to-do-list","aria-hidden":"true"}},[t._v("#")]),t._v(" Franko To-Do List")]),t._v(" "),e("h3",{attrs:{id:"一、项目介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、项目介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、项目介绍")]),t._v(" "),e("p",[t._v("此项目是使用 React 构建的在线的待办事项管理系统。在这里注册帐号后，你就可以便捷地添加自己的任务与计划，并操作它们。此外你还不需要担心存放在这里的信息是否会丢失，用户不管在哪个浏览器上，只要登入上次的帐号，就能继续管理之前创建的任务了。即便是密码丢失也能够使用自己的邮箱找回，保证了信息的安全性。")]),e("div",{staticStyle:{"text-align":"center"}},[e("img",{attrs:{src:"20190203A/001.png",alt:"欢迎页"}})]),e("p"),t._v(" "),e("p",[t._v("这个待办事项是我的一个 React 学习的练手项目，是由 Create React App 构建的。在开发这个项目的过程中，实际上用到的都是一些 React 的基础知识，某些功能在实现上看起来并不优雅，所以这个项目可能并不够完美，只能说是刚好达到够用的水平。不过麻雀虽小，五脏俱全，这个 To-Do List 作为我学习前端第一个完结的项目，这里还是可以让我向大家介绍介绍的。")]),t._v(" "),e("p",[t._v("这个待办事项主要实现了一下功能：")]),t._v(" "),e("ul",[e("li",[t._v("帐号的登入与注册")]),t._v(" "),e("li",[t._v("使用邮箱找回账号")]),t._v(" "),e("li",[t._v("任务的添加、完成、标星、删除")]),t._v(" "),e("li",[t._v("任务列表的切换")]),t._v(" "),e("li",[t._v("登录状态的保存")])]),t._v(" "),e("p",[t._v("主要使用到了以下技术：")]),t._v(" "),e("ul",[e("li",[t._v("后台：LeanCloud 数据存储 API")]),t._v(" "),e("li",[t._v("前端：React、SCSS、webpack、yarn、iconfont、SVG")])]),t._v(" "),e("p",[t._v("这是这个项目的预览链接与代码链接："),e("a",{attrs:{href:"http://franko.top/Todo-List/build/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://franko.top/Todo-List/build/index.html"),e("OutboundLink")],1),t._v("。进入链接之后就可以看到项目的效果，样式实际上是参考了 Microsoft To-Do List 的，当然做得比人家还差得远，尽管我花了比较多的时间写这些样式，我这个算是个多快好省的版本。现在我就来介绍一下这个待办事项的主要内容吧。")]),t._v(" "),e("h3",{attrs:{id:"二、使用待办事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、使用待办事项","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、使用待办事项")]),t._v(" "),e("p",[t._v("首先，如果想要使用这个待办事项就要有自己的帐号，因此在使用前必须进行登录或注册的操作。这个项目使用 LeanCloud 作为的数据库，同时借助 LeanCloud 提供的一系列接口来实现用户信息管理的功能。其中主要包括用户的登录、注册（要提供邮箱）、密码找回（借助邮箱）、登出等操作。具体的文档内容在「"),e("a",{attrs:{href:"https://leancloud.cn/docs/leanstorage_guide-js.html#hash954895",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据存储开发指南 · JavaScript - 用户"),e("OutboundLink")],1),t._v("」，实现起来并不难，在 React 组件中导入并使用 LeanCloud 给的相应接口，照着文档上做就可以实现相应的功能了。")]),e("div",{staticStyle:{"text-align":"center"}},[e("img",{attrs:{src:"20190203A/002.png",alt:"选择"}})]),e("div",{staticStyle:{"text-align":"center"}},[e("img",{attrs:{src:"20190203A/003.png",alt:"登录"}})]),e("div",{staticStyle:{"text-align":"center"}},[e("img",{attrs:{src:"20190203A/004.png",alt:"重置密码"}})]),e("div",{staticStyle:{"text-align":"center"}},[e("img",{attrs:{src:"20190203A/005.png",alt:"注册"}})]),e("p"),t._v(" "),e("p",[t._v("用户在使用帐号登录后，其帐户信息被保存在客户端。因此在用户进入页面前，就会自动读取客户端中存放的上次登录的用户信息，判断用户信息是否为空，为空就跳转到登录页面让用户登录，如果不为空就跳转到首页。如果不调用登出方法，当前用户的缓存将永久保存在客户端。")]),t._v(" "),e("p",[t._v("值得一提的是重置密码的操作。因为每个邮箱只能对应地注册一个帐号，因此使用邮箱找回密码是可行的。在这里只能通过 LeanCloud 提供的接口进行重置密码的操作，只需要提供邮箱帐号，相应的邮箱就会收到重置密码的链接。除此之外，即便是在 LeanCloud 的数据库中密码也不会明文展示，因此帐号是足够安全的。")]),t._v(" "),e("p",[t._v("登录帐号后，就可以进入到待办事项的界面了。整个界面的大致结构也比较简单，主要由侧边栏、标题栏、任务列表构成，效果如下图所示。接下来就对这幅图所展示的内容进行介绍：")]),e("div",{staticStyle:{"text-align":"center"}},[e("img",{attrs:{src:"20190203A/006.png",alt:"界面"}})]),e("p"),t._v(" "),e("p",[t._v("图中一共有七处标记，这些标记的区域分别具有如下功能：")]),t._v(" "),e("ol",[e("li",[t._v("切换不同状态的待办事项展示列表，具有进行中、重要、已完成三种状态；")]),t._v(" "),e("li",[t._v("注销当前帐号，回退到登录界面；")]),t._v(" "),e("li",[t._v("勾选任务项，被勾选的任务状态会被切换为已完成；")]),t._v(" "),e("li",[t._v("当前界面下任务的数目；")]),t._v(" "),e("li",[t._v("任务项目标星，被标星的任务被视为重要任务；")]),t._v(" "),e("li",[t._v("删除任务，删除的任务将不再显示在页面中；")]),t._v(" "),e("li",[t._v("添加任务项的输入框；")])]),t._v(" "),e("p",[t._v("每条添加的任务都有三种状态：未完成、重要、已完成，可以在侧边栏中切换展示相应状态的任务，任务的三种状态在界面中自由切换。目前待办事项条目只支持增加与删除，并不支持修改，如果对某条事项不满意只能删除后再重新编写。")]),t._v(" "),e("h3",{attrs:{id:"三、总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、总结")]),t._v(" "),e("p",[t._v("这是我写的第二篇项目总结，上一篇我写的项目总结还是网易云音乐的，到现在已经过去了两个月的时间。这次的总结的项目是 React 实现 To-Do List 项目，在做的这几个毕设里面可能算是较为简单的了，因为整个课程是文字教程，不像视频一样要跟着学，在学习的时间上可能会快很多。当然，整个项目中也谈不上有什么难点，并不像其他毕设那样可能会在一些知识点上耽误很多时间。")]),e("div",{staticStyle:{"text-align":"center"}},[e("img",{attrs:{src:"20190203A/timg.jpg",alt:"List"}})]),e("p"),t._v(" "),e("p",[t._v("整个项目的结构非常简单，没有什么高级的操作。对于 React 主要也就涉及到组件的一些基础操作，使用 state 管理组件内部状态，使用 props 做父子组件之间的通信。因为这个项目并不复杂，组件通信基本都是在父子层面的，所以都并没有使用 EventHub 或者 React-Redux 做组件通信。代码链接："),e("a",{attrs:{href:"https://github.com/FanKaiqiang/Todo-List",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/FanKaiqiang/Todo-List"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("这个毕设早在上个月中旬我就大概地照着课上的代码做了一遍，当然也就是照抄了一遍老师的代码，所以样式做出来和老师基本是一样的。于是这几天就把这个项目的代码重构了一下，主要是把样式弄好看一点，再把功能完善一下。果然只有把自己的毕设好好重构一番才能让自己理解得更加深刻。现在这个项目基本已经完成了，当然发挥空间也还非常大，不过把之前很难看的样式做成现在这样，自我感觉做得也算是七七八八了，已经可以开始着手写 README 了，就给这个项目做个总结吧。")])])},[],!1,null,null,null);a.default=i.exports}}]);