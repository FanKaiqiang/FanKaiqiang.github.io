(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{353:function(t,s,a){"use strict";a.r(s);var n=a(40),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"tip custom-block"},[a("p",[t._v("今天的学习的内容是webpack，但是感觉学起来有点困难，不是很顺利。还是整理一下以前的笔记调节一下心情吧，昨天和前天都为这个电脑的问题伤脑筋，今天终于可以继续愉快的在电脑上写博客了，昨天试着在手机上写博客，太难受了打起字来也太慢。")])]),t._v(" "),a("p",[t._v("这篇博客主题是AJAX，也就是之前的JSONP之后的课程，还是围绕着笔记进行讲解，期望得到复习的效果。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181115A/timg.jpg",alt:"AJAX"}})]),a("p"),t._v(" "),a("p",[t._v("在之前关于JSONP的博客里讲到过，借助html中的许多标签都可以发请求。但是通过这些方法给服务器发请求或多或少都有一些不足之处：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("<form>")]),t._v("表单可以发请求，需要会刷新或新开页面以更新数据。")]),t._v(" "),a("li",[a("code",[t._v("<a>")]),t._v("标签可以发GET请求，但也会刷新或新开页面。")]),t._v(" "),a("li",[a("code",[t._v("<img>")]),t._v("标签可以发GET请求，但是只能获取到图片形式的信息。")]),t._v(" "),a("li",[a("code",[t._v("<link>")]),t._v("标签可以发GET请求，但只能以css、favicon形式展示")]),t._v(" "),a("li",[a("code",[t._v("<script>")]),t._v("可以发GET请求，但是只能以脚本形式运行。")])]),t._v(" "),a("p",[t._v("通过以上标签都可以给服务器发请求，但是都有着各种缺点，并且除了"),a("code",[t._v("<form>")]),t._v("表单之外，都只能发GET请求。有没有既可以发GET、POST、PUT、DELETE请求，又可以以任意形式展示的请求方法呢？这就要用到今天的主角：AJAX。")]),t._v(" "),a("h2",{attrs:{id:"ajax的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax的原理","aria-hidden":"true"}},[t._v("#")]),t._v(" AJAX的原理")]),t._v(" "),a("p",[t._v("Ajax 即“Asynchronous JavaScript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。其本身不是一种新技术，而是一个在 2005年被Jesse James Garrett提出的新术语，用来描述一种使用现有技术集合的‘新’方法。这个方法大致的步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("使用XMLHttpRequest发请求")]),t._v(" "),a("li",[t._v("服务器返回XML格式的字符串")]),t._v(" "),a("li",[t._v("JS解析XML，并局部更新页面")])]),t._v(" "),a("p",[t._v("只要满足上述步骤的操作都可以称之为AJAX技术。那么问题来了，XMLHttpRequest是什么，有怎么用它来发请求呢？")]),t._v(" "),a("h3",{attrs:{id:"_1、用xmlhttprequest发请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、用xmlhttprequest发请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、用XMLHttpRequest发请求")]),t._v(" "),a("p",[t._v("window.XMLHttpRequest是一个全局对象，XMLHttpRequest本身则是一个构造函数，可以使用new命令生成实例。它没有任何参数，XMLHttpRequest对象是 AJAX 的主要接口，用于浏览器与服务器之间的通信。借助XMLHttpRequest对象，可以很方便地发送任意一种想要发送的请求：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("myButton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" request "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),t._v("\n  request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/xxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("上面的例子即新建了一个XMLHttpRequest实例request，并使用这个实例的向/xxx路径的服务器发送了一条GET请求。其中open()方法为初始化请求，send()方法为发送请求。除此之外XMLHttpRequest还提供了许多可以让操作请求与响应的API。比如：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("使用XMLHttpRequest.getRequestHeader()可以设置任意请求头，此方法必须在open()与send()之间调用。")])]),t._v(" "),a("li",[a("p",[t._v("使用XMLHttpRequest.send(body)可以设置任意请求体（第四部分），其中body为设置的请求体。如果该请求是GET请求，Chrome默认不会展示设定的请求体，因为GET请求默认没有请求体。")])]),t._v(" "),a("li",[a("p",[t._v("使用XMLHttpRequest.getAllResponseHeaders()可以获得整个响应头，使用XMLHttpRequest.getResponseHeader()可以获取指定的响应头。")])]),t._v(" "),a("li",[a("p",[t._v("使用XMLHttpRequest.statusText可以获取响应信息，即"),a("code",[t._v("HTTP/1.1 200 OK")]),t._v("里面的“OK”。")])]),t._v(" "),a("li",[a("p",[t._v("使用XMLHttpRequest。ResponseText可以获取到响应体，格式为字符串。")])])]),t._v(" "),a("h3",{attrs:{id:"_2、服务器返回json格式的字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、服务器返回json格式的字符串","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、服务器返回JSON格式的字符串")]),t._v(" "),a("p",[t._v("尽管X在Ajax中代表XML, 但由于JSON的许多优势，比如更加轻量以及作为JavaScript的一部分，目前JSON的使用比XML更加普遍。JSON和XML都被用于在Ajax模型中打包信息。因此这里将的是返回JSON格式字符串的情况。")]),t._v(" "),a("p",[t._v("JS与JSON是两种语言，JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 ECMAScript (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。")]),t._v(" "),a("p",[t._v("JSON与JavaScript还有一些差异，比如JSON只有object、array、number、string、true、false、null这几种对象，并没有undefined与function；JSON中的字符串首尾包含必须使用双引号；JSON中的对象没有原型链；JSON中没有变量，因为它不是变成语言，而是数据格式化语言，因此JSON中的变量不能只引用。")]),t._v(" "),a("p",[t._v("之前讲到JSONP，服务器返回给浏览器的函数参数是一个符合JSON语法的对象。接受到请求之后将响应内容设为符合JSON语法的字符串即可，比如：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/xxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("statusCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n  response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/json;charset=utf-8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Allow-Origin'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://frank.com:8001'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\n      {\n        "note":{\n          "to": "丁家文",\n          "from": "樊凯强",\n          "heading": "打招呼",\n          "content": "有点♂骚"\n        }\n      }\n    ')]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("p",[t._v("返回的响应内容就是符合JSON格式的字符串。接下来，请求方获取到响应内容之后，使用JS解析JSON，并局部更新页面。")]),t._v(" "),a("h3",{attrs:{id:"_3、js解析xml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、js解析xml","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、JS解析XML")]),t._v(" "),a("p",[t._v("XMLHttpRequest.readyState返回一个整数，代表当前请求的状态。该属性是只读的，它可能返回以下值，readyState等于4时，表明脚本发出的 HTTP 请求已经成功。其他情况，都表示 HTTP 请求还在进行中：")]),t._v(" "),a("ul",[a("li",[t._v("0：表示 XMLHttpRequest 实例已经生成，但是实例的open()方法还没有被调用。")]),t._v(" "),a("li",[t._v("1：表示open()方法已经调用，但是实例的send()方法还没有调用，仍然可以使用实例的setRequestHeader()方法，设定 HTTP 请求的头信息。")]),t._v(" "),a("li",[t._v("2：表示实例的send()方法已经调用，并且服务器返回的头信息和状态码已经收到。")]),t._v(" "),a("li",[t._v("3：表示正在接收服务器传来的数据体（body 部分）。这时，如果实例的responseType属性等于text或者空字符串，responseText属性就会包含已经收到的部分信息。")]),t._v(" "),a("li",[t._v("4：表示服务器返回的数据已经完全接收，或者本次接收已经失败。")])]),t._v(" "),a("p",[t._v("通信过程中，每当请求状态发生变化，它的readyState属性的值就会改变。这个值每一次变化，都会触发readyStateChange事件。而借助XMLHttpRequest.onreadystatechange属性，就可以实现监听readyStateChange事件的变化。因为请求失败仍然可能存在响应体，因此需要设置在readyState的值为4且请求成功时，再开始将获取的JSON字符串进行解析：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onreadystatechange")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readyState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请求响应都完毕了'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'说明请求成功'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 符合 JSON 语法的字符串")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseText\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" object "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换成 JS 对应的值,JSON.parse 是浏览器提供的")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  object")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'说明请求失败'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("p",[t._v("这样，就可以将获得的JSON信息转换为可以实际操作的对象，再通过JS操作这些对象，就可以实现页面的局部更新了。")]),t._v(" "),a("h2",{attrs:{id:"ajax与同源政策"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax与同源政策","aria-hidden":"true"}},[t._v("#")]),t._v(" AJAX与同源政策")]),t._v(" "),a("p",[t._v("浏览器安全的基石是“同源政策”（same-origin policy）。同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。同源政策是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。随着互联网的发展，同源政策越来越严格。目前，如果非同源，共有三种行为受到限制：")]),t._v(" "),a("ol",[a("li",[t._v("无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB。")]),t._v(" "),a("li",[t._v("无法接触非同源网页的 DOM。")]),t._v(" "),a("li",[t._v("无法向非同源地址发送 AJAX 请求（可以发送，但浏览器会拒绝接受响应）。")])]),t._v(" "),a("p",[t._v("什么是同源网页？")]),t._v(" "),a("ul",[a("li",[t._v("协议相同")]),t._v(" "),a("li",[t._v("域名相同")]),t._v(" "),a("li",[t._v("端口相同")])]),t._v(" "),a("p",[t._v("因此之前使用表单提交请求并没有跨域问题，但是AJAX提交请求是有跨域问题的。除此之外，JSONP也不会受到同源政策的限制，那么要怎样在规避AJAX这个限制呢？这里就要讲到CORS了。")]),t._v(" "),a("p",[t._v("CORS 是一个 W3C 标准，全称是“跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨域的服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。可以在服务器的响应头中添加Access-Control-Allow-Origin字段，该字段可以放置一个域名，这个域名就可以向此服务器发送跨域请求了。下面是一个例子：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Allow-Origin'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://franko.top'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("Access-Control-Allow-Origin它的值只能接受一个域名，或者是一个*，表示接受任意域名的请求。")]),t._v(" "),a("p",[t._v("CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。JSONP 只支持GET请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。这里只是将CORS作为AJAX规避同源政策的方法简单的提一下，并不在此详细深入。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("上面就是本次博客中关于AJAX的内容。这篇博客内容并不多，但是把AJAX的实现原理基本过了一遍，主要都是笔记里的内容，同时参考了一些[http://JavaScript.ruanyifeng.com/bom/ajax.html](AJAX -- JavaScript 标准参考教程（alpha）)中的一些内容。MDN中关于XMLHttpRequest与AJAX的内容也给了我一些帮助。今天晚上就到这里了，感觉复习过后算是把快忘记的东西又捡回来了吧。今天学的webpack有点难，明天专心下来攻关吧。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181115A/001.jpg",alt:"攻关"}})]),a("p")])},[],!1,null,null,null);s.default=e.exports}}]);