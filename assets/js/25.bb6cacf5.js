(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{335:function(a,s,t){"use strict";t.r(s);var n=t(40),e=Object(n.a)({},function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("div",{staticClass:"tip custom-block"},[t("p",[a._v("今天早上继续把昨晚没有写完的部分完成。上次博客讲到JS的数据类型的转换，其中只涉及到三种类型：字符串、数值、布尔。本文主要讲的便是对象这种数据类型。这部分本来也是上次课程的内容，因为写在一起篇幅可能会过长，所以本文就将这部分内容单独提出，进行归纳。")])]),a._v(" "),t("p",[a._v("因为自己对这部分知识感觉掌握得并不透彻，所以在编写博客的过程中。也会查阅其他方面的资料。")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181014A/timg.jpg",alt:"文字"}})]),t("p"),a._v(" "),t("p",[a._v("在之前的两次博客里面，讲到JavaScript有七种数据类型，分别是：")]),a._v(" "),t("ul",[t("li",[a._v("数值（number）")]),a._v(" "),t("li",[a._v("字符串（string）")]),a._v(" "),t("li",[a._v("布尔（boolean）")]),a._v(" "),t("li",[a._v("对象（object）")]),a._v(" "),t("li",[a._v("null")]),a._v(" "),t("li",[a._v("undefined")]),a._v(" "),t("li",[a._v("Symbol")])]),a._v(" "),t("p",[a._v("其中，对象（object）被称为复杂类型，除了对象以外的类型被称为简单类型。在之前的博客讲到，复杂类型是由简单对象组合而成的。除此之外，普通类型与对象还有什么区别呢？这就是这次博客的主题，将从内存的角度入手，观察普通类型与对象的区别。")]),a._v(" "),t("h2",{attrs:{id:"堆内存与栈内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆内存与栈内存","aria-hidden":"true"}},[a._v("#")]),a._v(" 堆内存与栈内存")]),a._v(" "),t("p",[a._v("在JS中，每一个数据都需要一个内存空间。内存空间又被分为两种，栈内存(stack)与堆内存(heap)。一般来说，栈内存中存放的是存储对象的地址，而堆内存中存放的是存储对象的具体内容。对于简单类型的值而言，其地址和具体内容都存在与栈内存中；而基于复杂类型的值，其地址存在栈内存，其具体内容存在堆内存中。下面是一个示例：")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" o "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    name "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'frank'")]),a._v("\n    age  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'18'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\no"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("gander "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'male'")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("p",[a._v("下面是我自己画的一个图，简要地表明上面代码完成后，各数据在堆栈内存中的存放情况：")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181014A/%E5%A0%86%E6%A0%88%E5%86%85%E5%AD%98.png",alt:"堆栈内存"}})]),t("p"),a._v(" "),t("p",[a._v("从图中可以发现几个要点：")]),a._v(" "),t("ol",[t("li",[a._v("简单类型直接存储在栈内存中的简单数据段；复杂类型在栈中存储了指向堆内存中该实体的起始地址。")]),a._v(" "),t("li",[a._v("简单类型的数据改变时，直接改变栈内存中保存的数据")]),a._v(" "),t("li",[a._v("因为对象的内容是存储在堆内存中的，添加内容时只需改变堆内存中的内容，栈内存只存放地址。")])]),a._v(" "),t("p",[a._v("这里提一下关于图中的「引用」。JavaScript中的对象是存放在堆内存中的，如果要访问引用对象的时候，采用的是按引用访问，其实就是在栈内存中存放了一个指向对象的地址，要访问堆内存中的对象，就要通过这个地址来访问，例如上图中的“ADDR 100”，就是一个指向对象的地址。所有对象与变量的关系都是引用关系。")]),a._v(" "),t("p",[a._v("下面过一下几个关于对象在内存中存放的实例，应该会对JS中的对象有一个更深层次的了解。")]),a._v(" "),t("h2",{attrs:{id:"几个对象引用实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#几个对象引用实例","aria-hidden":"true"}},[a._v("#")]),a._v(" 几个对象引用实例")]),a._v(" "),t("h3",{attrs:{id:"_1、对象新赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、对象新赋值","aria-hidden":"true"}},[a._v("#")]),a._v(" 1、对象新赋值")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("下面是我画的一个图例：")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181014A/001.png",alt:"例子1"}})]),t("p"),a._v(" "),t("p",[a._v("需要知道，“=”只做一件事情，即把右边的东西存到左边。所以要先将{ name = 'b' }存起来，再赋值给b。整个操作和a并没有关系，因此a.name='a'。")]),a._v(" "),t("h3",{attrs:{id:"_2、给对象添加内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、给对象添加内容","aria-hidden":"true"}},[a._v("#")]),a._v(" 2、给对象添加内容")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a\nb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b'")]),a._v("\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("下面是我画的一个图例：")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181014A/002.png",alt:"例子3"}})]),t("p"),a._v(" "),t("p",[a._v("由此可见，b在作更改的时候，会直接对堆内存中被指向的内容进行修改，因为a、b指向的是同一个对象，所以a的值也收到了影响，这里a.name='b'。")]),a._v(" "),t("h3",{attrs:{id:"_3、给对象赋null值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、给对象赋null值","aria-hidden":"true"}},[a._v("#")]),a._v(" 3、给对象赋null值")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v("\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("下面是我画的一个图例：")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181014A/003.png",alt:"例子2"}})]),t("p"),a._v(" "),t("p",[a._v("由图可知，b被赋值null后可以视为是b的数据类型由对象转变为null了。可以知道，null作为简单类型是存放在栈内存中的，因此原本指向的堆内存中的内容是不受影响的。所以，a.name='a'。")]),a._v(" "),t("h3",{attrs:{id:"_4、对象自引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、对象自引用","aria-hidden":"true"}},[a._v("#")]),a._v(" 4、对象自引用")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("self "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a\na   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//  { self : {...} }")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("这是在之前讲对象的时候提到过的对象里面引用自己的情况。乍一看感觉很奇怪，那这样不会无限循环吗？看一看在内存中的存放情况：")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181014A/004.png",alt:"例子4"}})]),t("p"),a._v(" "),t("p",[a._v("可以发现，堆内存中存放的内容也是一个栈内存中所需要指向的地址。这样的话就能很简单地讲清楚自引用的情况。但是以下表述方法是不行的：")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" self "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\na   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//  undefined")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("感觉和之前的并没有不同。但是为什么a变成undefined了呢？这就涉及到变量提升了，经过变量提升后，之前的代码变成了这样：")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" self "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\na   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//  undefined")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("因为在最初定义的时候，a是等于undefined的，此时self:a中的a并不是对象，所以没有达到对象自引用的效果，a最终还是undefined。这种情况是需要注意的。")]),a._v(" "),t("h3",{attrs:{id:"_5、一道面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、一道面试题","aria-hidden":"true"}},[a._v("#")]),a._v(" 5、一道面试题")]),a._v(" "),t("p",[a._v("下面是一道比之前的几个例子都要难的情况，据说是面试题：")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("alert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//   undefined")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("alert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//   [object,Object]")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("这是一道以惯性思维来考虑的话会感觉匪夷所思的一道题目，为什么a.x会是undefined，那b又是指向谁呢？现在对代码逐条进行分析。")]),a._v(" "),t("p",[a._v("最开始，a、b都是指向34：{n：1}，然后出现了这样的代码：a.x = a = { n:2 }，这就是困惑的原因，把它拆开了看：")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a \na "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("a.x=a，很好理解，就是一个对象的自引用，在堆内存34的位置加上一条a的引用地址即可。a = { n:2 }就是一个对象的重新赋值了，这个在第一个例子里讲过了，将新内容存放在堆内存的另一个位置，在让a引用它。因为a的引用地址发生了改变，所以原来34位置中a的引用地址也发生了改变。情况如下图：")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181014A/005.png",alt:"例子5"}})]),t("p"),a._v(" "),t("p",[a._v("这样情况就很清楚了，因为x被添加在34里，所以后面a引用54中的x自然会得到undefined的结果。而此时的b引用的仍然是34中的内容，所以b.x=a。因为alert调用的是toString()方法，所以输出结果为[object,Object]。")]),a._v(" "),t("h2",{attrs:{id:"java垃圾回收（gc）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java垃圾回收（gc）","aria-hidden":"true"}},[a._v("#")]),a._v(" Java垃圾回收（GC）")]),a._v(" "),t("p",[a._v("如果一个对象没有被引用，就是垃圾，将被回收。如果不进行垃圾回收，就是在不断的分配内存空间而不进行回收，内存迟早都会被消耗空。")]),a._v(" "),t("p",[a._v("看一下一个典型的垃圾回收的例子：")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" name "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" name "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" b\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("内存图解如下：")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181014A/006.png",alt:"例子6"}})]),t("p"),a._v(" "),t("p",[a._v("这时的a对象原来存放在34位置的内容就是垃圾，将被回收。那再来看一个更加复杂的垃圾回收实例：")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[a._v("fn")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\ndocument"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("onclick "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" fn\nfn "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("这时的fn被赋值为null，那么function()是垃圾吗？同样地看一下我画的内存图例：")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181014A/007.png",alt:"例子7"}})]),t("p"),a._v(" "),t("p",[a._v("先说结论：function()不是垃圾。因为在fn被赋值为null之后onclick仍然引用了function()，所以function()不是垃圾。")]),a._v(" "),t("p",[a._v("那么把页面关掉之后function()是垃圾吗？这个时候就是。因为关掉页面后，document就为null了，这时function()已经没有对象引用。但是在IE 6有一个bug，即在页面关闭之后因为堆内存中的这三个内存块之间还有引用，释放机制会误认为它们不是垃圾。这种情况称之为"),t("strong",[a._v("内存泄漏")]),a._v("，就是不再用到的内存，但是没有及时释放。")]),a._v(" "),t("p",[a._v("最简单的解决办法就是自己将这些引用解除，即置为null：")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("window"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[a._v("onunload")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    document"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("onclick "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h2",{attrs:{id:"深拷贝与浅拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝与浅拷贝","aria-hidden":"true"}},[a._v("#")]),a._v(" 深拷贝与浅拷贝")]),a._v(" "),t("p",[a._v("最后提一下深拷贝与浅拷贝。这里只是简要地讲一下意思与区别，不做深入探讨：（图文无关）")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181014A/timg2.jpg",alt:"深度学习"}})]),t("p"),a._v(" "),t("h3",{attrs:{id:"_1、深拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、深拷贝","aria-hidden":"true"}},[a._v("#")]),a._v(" 1、深拷贝")]),a._v(" "),t("p",[a._v("比如基本类型的简单赋值就可以看做是深拷贝，比如下面这个例子，b改变不会影响a：")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("h3",{attrs:{id:"_2、浅拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、浅拷贝","aria-hidden":"true"}},[a._v("#")]),a._v(" 2、浅拷贝")]),a._v(" "),t("p",[a._v("下面这种对象中的值的改变可以看做是浅拷贝，b改变影响到a：")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" name "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a\nb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b'")]),a._v("\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a'")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("深拷贝和浅拷贝最根本的区别在于是否是真正获取了一个对象的复制实体，而不是引用，结合刚才的内容也可以看出，深拷贝是在栈内存中操作的，浅拷贝是在堆内存中操作的。至于深浅拷贝的更深层次的原理以及方法，就不在这里做出讲解了，以后深入学习了再另开博客进行归纳。")]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("这次的博客到这里就差不多了，这篇博客画图的地方比较多，而且内容也比较多，所以比较长，写得也有点累。不过上节课的内容，现在已经完全以博客的形式归纳出来了。相信在这次博客之后，对普通类型与对象在内存层面的区别的认识得以更进一步了。下面是一些给我启发的一些内容，在此鸣谢：")]),t("div",{staticStyle:{"text-align":"center"}},[t("img",{attrs:{src:"20181014A/timg1.jpg",alt:"午睡"}})]),t("p"),a._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/pingfan592/article/details/55189622",target:"_blank",rel:"noopener noreferrer"}},[a._v("前端高质量知识(一)-JS内存空间详细图解"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/xiaoxi/p/6486852.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java垃圾回收（GC）机制详解"),t("OutboundLink")],1)])])])},[],!1,null,null,null);s.default=e.exports}}]);