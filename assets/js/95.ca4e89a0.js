(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{405:function(t,a,e){"use strict";e.r(a);var s=e(40),n=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h4",{attrs:{id:"vue的双向绑定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue的双向绑定","aria-hidden":"true"}},[t._v("#")]),t._v(" Vue的双向绑定")]),t._v(" "),e("p",[t._v("VUE 实现双向数据绑定的原理就是利用了 Object.defineProperty() 这个方法，重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的。Vue 将遍历 Vue 实例的 data 选项的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。"),e("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/reactivity.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("双向绑定"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。")]),t._v(" "),e("h4",{attrs:{id:"生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期","aria-hidden":"true"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),e("p",[t._v("Vue 的生命周期："),e("a",{attrs:{href:"http://franko.top/1902/20190207A/#%E4%B8%80%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"}},[t._v("生命周期"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("生命周期："),e("a",{attrs:{href:"http://franko.top/1901/20190104A/#4%E3%80%81%E7%8A%B6%E6%80%81-State-%E5%92%8C-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F",target:"_blank",rel:"noopener noreferrer"}},[t._v("声明周期"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"vuex-与-vue-router"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex-与-vue-router","aria-hidden":"true"}},[t._v("#")]),t._v(" Vuex 与 Vue Router")]),t._v(" "),e("p",[t._v("浅谈vue的computed属性和methods区别："),e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/33778594",target:"_blank",rel:"noopener noreferrer"}},[t._v("区别"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。")]),t._v(" "),e("ul",[e("li",[t._v("state，驱动应用的数据源；")]),t._v(" "),e("li",[t._v("view，以声明方式将 state 映射到视图；")]),t._v(" "),e("li",[t._v("actions，响应在 view 上的用户输入导致的状态变化。")])]),t._v(" "),e("p",[t._v("文档："),e("a",{attrs:{href:"https://vuex.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vuex"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("Vue Router 是 Vue.js 官方的路由管理器。")]),t._v(" "),e("p",[t._v("路由守卫就是在路由跳转前做一些验证，文档："),e("a",{attrs:{href:"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"react-router-和-redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-router-和-redux","aria-hidden":"true"}},[t._v("#")]),t._v(" React Router 和 Redux")]),t._v(" "),e("p",[t._v("React Router 是一个基于 React 之上的路由库。 根节点"),e("code",[t._v("<Router>")]),t._v("，相应路由 "),e("code",[t._v("<Route>")]),t._v("。"),e("a",{attrs:{href:"http://react-guide.github.io/react-router-cn/docs/Introduction.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("Redux 是 JavaScript 状态容器，提供可预测化的状态管理。"),e("a",{attrs:{href:"http://franko.top/1901/20190115A/",target:"_blank",rel:"noopener noreferrer"}},[t._v("博客"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("前端路由原理："),e("a",{attrs:{href:"https://github.com/huyaocode/webKnowledge/tree/master/React#%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E5%8E%9F%E7%90%86",target:"_blank",rel:"noopener noreferrer"}},[t._v("History 模式"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"二者的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二者的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 二者的区别")]),t._v(" "),e("p",[t._v("相同点：")]),t._v(" "),e("pre",[e("code",[t._v("1.都支持服务器端渲染\n\n2.都有Virtual DOM,组件化开发,通过props参数进行父子组件数据的传递,都实现webComponent规范\n\n3.数据驱动视图\n\n4.都有支持native的方案,React的React native,Vue的weex\n\n5.都有管理状态，React有redux,Vue有自己的Vuex（自适应vue，量身定做）\n")])]),t._v(" "),e("p",[t._v("不同点：")]),t._v(" "),e("pre",[e("code",[t._v("   1.React严格上只针对MVC的view层,Vue则是MVVM模式\n\n   2.virtual DOM不一样,vue会跟踪每一个组件的依赖关系,不需要重新渲染整个组件树.\n\n       而对于React而言,每当应用的状态被改变时,全部组件都会重新渲染,所以react中会需要shouldComponentUpdate这个生命周期函数方法来进行控制\n\n   3.组件写法不一样, React推荐的做法是 JSX + inline style, 也就是把HTML和CSS全都写进JavaScript了,即'all in js';\n\n       Vue推荐的做法是webpack+vue-loader的单文件组件格式,即html,css,jd写在同一个文件;\n\n   4.数据绑定: vue实现了数据的双向绑定,react数据流动是单向的\n\n   5.state对象在react应用中不可变的,需要使用setState方法更新状态;\n\n     在vue中,state对象不是必须的,数据由data属性在vue对象中管理；\n")])]),t._v(" "),e("h4",{attrs:{id:"react双向绑定的具体操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react双向绑定的具体操作","aria-hidden":"true"}},[t._v("#")]),t._v(" React双向绑定的具体操作")]),t._v(" "),e("p",[t._v("使用event.target事件对象来更新react中的数据状态")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//首先初始化状态")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//给输入框添加onChange事件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),t._v("  onChange"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("handleChange"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("username"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//编写事件代码")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("handleChange")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        username"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" event"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("h4",{attrs:{id:"v-model-与-sync"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-model-与-sync","aria-hidden":"true"}},[t._v("#")]),t._v(" v-model 与 :sync")]),t._v(" "),e("p",[e("code",[t._v('<input type="text" v-model="mes">')]),t._v("此时mes值就与input的值进行双向绑定    实际上上面的代码是下面代码的语法糖。")]),t._v(" "),e("p",[e("code",[t._v('<input  v-bind:value="mes"  v-on:input="mes= $event.target.value"/>')]),t._v("  首先 input 元素本身有个 oninput 事件，这是 HTML5 新增加的，类似  onchange ，每当输入框内容发生变化，就会触发 oninput ，把最新的value传递给 mes。从而实现了v-model")]),t._v(" "),e("p",[t._v("在有些情况下，可能需要对一个 prop 进行“双向绑定”。但是真正的双向绑定会带来维护上的问题，因为子组件可以修改父组件，且在父组件和子组件都没有明显的改动来源。sync修饰符，与平常使用$emit实现父子组件通信没有区别，只不过是写法上方便一些。\n首先知道，在子组件中可以通过$emit向父组件通信，通过这种间接的方式改变父组件的data，从而实现子组件改变props的值。比如向下边这这样：")]),t._v(" "),e("p",[t._v("子组件使用$emit向父组件发送事件：")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("$emit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'update:title'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newTitle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("父组件监听这个事件并更新一个本地的数据title：")]),t._v(" "),e("div",{staticClass:"language-html line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("text-document")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":title")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("title"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("@update:")]),t._v("title")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("val => title = val"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("text-document")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("为了方便这种写法，vue提供了.sync修饰符，说白了就是一种简写的方式，可以将其当作是一种语法糖，比如v-on: click可以简写为@click。而上边父组件的这种写法，换成sync的方式就像下边这样：")]),t._v(" "),e("div",{staticClass:"language-html line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("text-document")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":sync.title")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("title"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("text-document")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("子组件中的写法不变，其实这两种写法是等价的，只是一个语法糖而已。")])])},[],!1,null,null,null);a.default=n.exports}}]);