(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{365:function(t,s,a){"use strict";a.r(s);var n=a(40),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"tip custom-block"},[a("p",[t._v("今天继续学习剩下的课程。系统课已经基本学完，剩下的几节课是属于查漏补缺的课程。其中有一个比较重要的知识点被反复提到，就是JS的原型与继承。")])]),t._v(" "),a("p",[t._v("本篇博客同样也是课后任务的一部分，这些内容是被当作「一些重要但前面没讲的内容」来讲的，值得重视。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181129A/timg.jfif",alt:"重要内容"}})]),a("p"),t._v(" "),a("p",[t._v("之前这个知识点也被作为JS的押题项被提出来过，当时还在想要不要写，毕竟早在一个多月前学习JS中的原型的时候好像就写了一篇关于"),a("a",{attrs:{href:"http://franko.top/1810/20181017A/",target:"_blank",rel:"noopener noreferrer"}},[t._v("【记录】原型与原型链"),a("OutboundLink")],1),t._v("的博客作为课后任务。那个时候对于这块知识还是处于开荒的状态，写完博客之后还是对自己的掌握程度不够满意。当时还有些挫败感。")]),t._v(" "),a("p",[t._v("一个月之后我的系统课也基本学完了，现在回头看这些感觉也并没有多难，而且在今天听了关于继承的内容之后，感觉对这方面的知识掌握程度也有一定程度的加深。所以这次就借着这节课的课后任务的机会，把有关JS的继承这方面的知识写一下。主要就是把上课的笔记过一遍吧，这次记得笔记有点多，顺便查查资料，把知识拓展一下。")]),t._v(" "),a("h2",{attrs:{id:"js中的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中的继承","aria-hidden":"true"}},[t._v("#")]),t._v(" JS中的继承")]),t._v(" "),a("h3",{attrs:{id:"什么是继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是继承","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是继承")]),t._v(" "),a("p",[t._v("直接看维基百科，维基百科里面关于继承是这样说的：")]),t._v(" "),a("blockquote",[a("p",[t._v("继承（英语：inheritance）是面向对象软件技术当中的一个概念。如果一个类别B“继承自”另一个类别A，就把这个B称为“A的子类”，而把A称为“B的父类别”也可以称“A是B的超类”。"),a("strong",[t._v("继承可以使得子类具有父类别的各种属性和方法")]),t._v("，而不需要再次编写相同的代码。")])]),t._v(" "),a("p",[t._v("上面这段话说得很清楚，基本上把我接下来要说的都大致地提到了一下，现在就把它展开来讲讲。")]),t._v(" "),a("p",[t._v("首先继承是面向对象编程中的一个概念。面向对象编程有一套完整的术语，比如类、实例、方法、继承、接口、多态、反射等等。看到继承与多态，就让我想起了大三的时候学Java的时候就是学过的，现在也忘得差不多了，当年没有认真学，不然现在也不会选择走前端这条路，想来也是感慨万千。")]),t._v(" "),a("p",[t._v("可是没想到JavaScript的继承与Java的继承相差如此之大。前面高亮了一句话，继承可以使得子类具有父类别的各种属性和方法，他说得一点都没错，但是在ES6之前，JavaScript里并没有类，连类都没有那又谈何继承呢。这就要引入今天的主题，原型继承了。")]),t._v(" "),a("h3",{attrs:{id:"原型继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型继承","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型继承")]),t._v(" "),a("p",[t._v("关于原型继承，MDN中这样介绍：")]),t._v(" "),a("blockquote",[a("p",[t._v("当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object ）都有一个私有属性（称之为"),a("code",[t._v("__proto__")]),t._v("）指向它的原型对象（prototype）。该原型对象也有一个自己的原型对象("),a("code",[t._v("__proto__")]),t._v(") ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。")])]),t._v(" "),a("p",[t._v("举个例子，最开始学习的全局对象window里面有许多方法，比如Object()、Array()、Function()等等。这些方法一般称之为构造函数。以这三个构造函数都有一个重要属性———原型。比如"),a("code",[t._v("Object.prototype")]),t._v("就是Object函数的原型，这个属性也是一个对象。")]),t._v(" "),a("p",[t._v("假设声明一个变量a，令"),a("code",[t._v("a = new Object()")]),t._v("，这样a就是一个新生成的空对象。既然是空对象，那么a.toString()这个方法是从何而来的呢？在之前的博客就讲过了，对象a中具有一个指向它的原型对象（prototype）的私有属性（"),a("code",[t._v("__proto__")]),t._v("）。toString方法是存在于Object的原型对象里的，借助这个"),a("code",[t._v("__proto__")]),t._v("属性，a对象与toString方法产生了关联。那么这种行为可以被称为继承吗？")]),t._v(" "),a("p",[t._v("事实上，无论是在刚才引用的维基百科也好，MDN也罢，都没有就继承给出一个明确的定义，只说了继承是面向对象编程的一个概念。继承是类与类的关系，但是在JavaScript中并没有类，虽然在ES6 中引入了class关键字，但也只是语法糖，JavaScript 仍然是基于原型的。所以要假设刚才提到的这些构造函数是类，这也是为什么的这篇博客题目也是「JS模拟继承」，不是真正真正的继承，是在模拟继承的效果。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181129A/001.jfif",alt:"继承"}})]),a("p"),t._v(" "),a("p",[t._v("在JS中什么叫做继承？继承需要两个类，子类与父类。假设Object是类、Array也是类，这两个对象本身之间并没有关系。但是因为几乎所有 JavaScript 中的对象都是位于原型链顶端的Object的实例，其中也包括Array.prototype，因此具有"),a("code",[t._v("Array.prototype.__proto__ = Object.prototype")]),t._v("这样一条关系。所以Array构造出来的对象直接拥有Object对象的属性，因此可以把Array看作是Object的子类。")]),t._v(" "),a("p",[t._v("再声明一个变量b，"),a("code",[t._v("b = new Array()")]),t._v("。b就是新建的一个数组对象，知道，数组对象具有push()方法，也具有valueof()方法。a的push()方法是从它的原型"),a("code",[t._v("a.__proto__ = Array.prototype")]),t._v("上获取的，但是a的原型上并没有valueof()方法，所以就要去a的原型的原型（即Object.prototype）上找，总共进行了两次搜索。")]),t._v(" "),a("p",[t._v("在这个例子里a的valueof()方法通过两次搜索才获得，可以称之为是继承只Object的。而a的push()方法则是a的实例属性，并不能称之为继承得来的。与之相似地，CSS中也有样式继承的概念，比如一个"),a("code",[t._v("<div>")]),t._v("中包着一个"),a("code",[t._v("<span>")]),t._v("，如果"),a("code",[t._v("<span>")]),t._v("自己设定了font-size，就不能称之为继承样式，如果"),a("code",[t._v("<span>")]),t._v("没有设定font-size，则会继承"),a("code",[t._v("<div>")]),t._v("的font-size。")]),t._v(" "),a("p",[t._v("这里顺便举一个特例，Array的原型与Object的原型中都有一个toString方法。与CSS的继承规则相似，这个时候在子类别在继承父类别的同时，还可以重新定义某些属性，并重写某些方法，即覆盖父类别的原有属性和方法，使其获得与父类别不同的功能。所以a的toString方法是a的实例属性，是经过重写的，与Object的toString不同。")]),t._v(" "),a("p",[t._v("讲了这么多，回到一点，就是一直是在假设上面这些构造函数是类，也只是在「模拟」继承的效果。但是在面试官在面试的时候不会管这么多，他认为JS可以有继承。可能会被要求自己使用JS实现一下继承的效果。当然照着上面这些构造函数写是不行的，这些是已经存在的，不是自己实现的。要自己实现继承效果，那么问题来了，在JS中怎么写出一个类呢？")]),t._v(" "),a("h2",{attrs:{id:"es5中实现继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es5中实现继承","aria-hidden":"true"}},[t._v("#")]),t._v(" ES5中实现继承")]),t._v(" "),a("p",[t._v("在ES5中没有类，如何实现一个类呢，那什么又是类呢？继承没有定义，类总有定义，这回看看百度百科上怎么讲：")]),t._v(" "),a("blockquote",[a("p",[t._v("类（Class）是面向对象程序设计（OOP，Object-Oriented Programming）实现信息封装的基础。类是一种用户定义类型，也称类类型。每个类包含数据说明和一组操作数据或传递消息的函数。类的实例称为对象。")])]),t._v(" "),a("p",[t._v("意思就是能产生对象的东西即为类。话不多说，直接上代码，然后再来一句句进行讲解：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Human")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这个函数自身的属性")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Human")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("run")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//原型上的属性")]),t._v("\n     console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我叫"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"，我在跑"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Man")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Human")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用父类，继承父类本身的属性")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gender "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这样的写法是错误的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Man.prototype.__proto__ = Human.prototype")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面的三行代码连接了父类与之类的原型")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Human")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Man")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Man")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fight")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'糊你熊脸'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Man")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br")])]),a("p",[t._v("在上面实现了一个类Man，Man的父类Human，Human的父类就是Object了。在构造函数中定义类的自身属性，在原型中构造类的共有属性。通过在Man中调用Human，就可以让Man继承Human的自身属性。那如何把Human原型上的属性也让Man继承呢？")]),t._v(" "),a("p",[t._v("的目的就是实现"),a("code",[t._v("Man.prototype.__proto__ = Human.prototype")]),t._v("的效果，但是在")]),t._v(" "),a("p",[t._v("在JS中，这些构造函数都有一个重要属性prototype，它们之间通过prototype互相关联，最后实现继承。为什么prototype这个重要属性，有些函数有，有些函数没有呢？原因就在于，这些函数是构造函数，只有构造函数具有prototype属性。"),a("strong",[t._v("prototype属性有且只有存放共有属性的地址的功能")]),t._v("。至于"),a("code",[t._v("__proto__")]),t._v("属性则是每个对象都有的属性，它指向该对象的构造函数存放共有属性的地址。")]),t._v(" "),a("p",[t._v("所以，的目的就是实现"),a("code",[t._v("Man.prototype.__proto__ = Human.prototype")]),t._v("的效果，但是在IE中是不支持直接给原型链赋值的，而且这样做对性能的消耗也是比较大的，因为在原型链上查找属性比较耗时，如果访问不存在的属性时会遍历整个原型链。所以不推荐直接对"),a("code",[t._v("__proto__")]),t._v("属性进行修改。所以才要用到上面例子的那三行代码：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Human")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Man")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("这三行代码与"),a("code",[t._v("Man.prototype.__proto__ = Human.prototype")]),t._v("等价。声明一个空函数，然后让这个函数的prototype属性指向Human.prototype。那么在"),a("code",[t._v("Man.prototype = new f()")]),t._v("这一句中发生了什么事情，当使用new时，会发生什么？以上面代码中的new为例，来分析一下：")]),t._v(" "),a("ol",[a("li",[t._v("首先new关键字会产生一个空对象temp")]),t._v(" "),a("li",[t._v("在这个空对象中，令this等于temp")]),t._v(" "),a("li",[t._v("令this的"),a("code",[t._v("__proto__")]),t._v("属性等于构造函数f()的prototype（原型对象）")]),t._v(" "),a("li",[t._v("在temp中调用一遍f()")]),t._v(" "),a("li",[t._v("把this的结果return，即将这个temp赋值给Man.prototype")])]),t._v(" "),a("p",[t._v("通过上面的操作，虽然不能直接操作"),a("code",[t._v("__proto__")]),t._v("属性，但是通过new实现了间接操作"),a("code",[t._v("__proto__")]),t._v("属性。相当于令"),a("code",[t._v("Man.prototype === temp")]),t._v(" ，再令"),a("code",[t._v("temp.__proto__ === Human.prototype")]),t._v("。从而实现了"),a("code",[t._v("Man.prototype.__proto__ = Human.prototype")]),t._v("的效果。")]),t._v(" "),a("p",[t._v("那么为什么不直接写"),a("code",[t._v("Man.prototype = new Human()")]),t._v("，因为既然空函数f的prototype就是Human的prototype，为什么还要用到这个空函数f呢？事实上不使用这个f的写法确实也可以达到将Man与Human的原型连接起来的效果，但是也产生了一个副作用，问题就在于上面分析的第四步。它会在Man.prototype里调用一次Human，使得Man.prototype中含有Human的自有属性。换句话说，这样就相当于把Man.prototype作为Human的一个实例了，事实显然不是如此。所以使用一个空函数进行过渡是必要的，调用一个空函数就不会产生这些影响。")]),t._v(" "),a("h2",{attrs:{id:"es6中实现继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6中实现继承","aria-hidden":"true"}},[t._v("#")]),t._v(" ES6中实现继承")]),t._v(" "),a("p",[t._v("ES6中引入了class关键字，使得可以正式地去声明一个类。不过使用class声明的类使用typeof返回的数据类型仍然是function，所以说class是一个帮助更好在JS中实现类的一个语法糖，而不是真正地创建一个类。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181129A/002.jfif",alt:"ES6"}})]),a("p"),t._v(" "),a("p",[t._v("既然是语法糖，那么使用class实现继承肯定要比ES5的土办法要方便得多，直接来看代码：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Human")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//自身属性写在constructor里")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//原型中的共有属性与constructor并列写出")]),t._v("\n         console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我叫"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"，我在跑"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Man")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Human")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用extends关键字实现共有属性继承")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用super关键字调用父类构造函数")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gender "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fight")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'糊你熊脸'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("p",[t._v("上面就是ES6的写法，无论是代码的整洁性还是复杂度，对比ES5的写法都得到了提高。一个类的自有属性与共有属性全部都在类定义中写出，而且类的共有属性的继承直接用一个extends关键字就解决了，在ES5罗嗦了那么久。其中super意为超类（父类），这句代码等同于"),a("code",[t._v("Human.call(this, name)")]),t._v("，即调用父类构造函数。可能是为了让这些构造函数更像是一个类，所以才推出了这种写法吧。")]),t._v(" "),a("p",[t._v("可以看出这种方法非常方便，大多数人在了解这两种方法之后肯定也会毫不犹豫选择使用前者，毕竟是语法糖嘛。但是ES6的这种方法也是有缺陷的。这种方法只能在原型上声明函数属性，如果要在原型上声明非函数属性怎么办？其实也有转寰的办法，大概是这样做：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Human")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我叫"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"，我在跑"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//相当于ES5中的 Human.prototype = '人类'")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'人类'")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("就是把原本的非函数属性的内容作为一个函数的返回值，再通过get语法把这个将这个返回值绑定到Human类上作为属性。但是这样一来，如果是不明白其中原理的人绝对会一头雾水、不知所云。ES5的代码虽然看起来更为繁杂，但是逻辑性更好，阅读完代码之后就知道它要做什么，而且ES5的声明原型属性也更为灵活，可以一条一条声明，不必一次性在class声明时一次性写完。所以ES5的方法与class语法糖相比，除了代码量得到了一定的减少，并没有过多的劣势。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("完成于 2018年11月30日 11:26:19")]),t._v(" "),a("p",[t._v("上面就是本篇博客中关于JS模拟继承的内容。这次写了这么久，也是我没有预料到的。大部分内容其实是我已经写在笔记里的，参考了一些MDN里的内容："),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain",target:"_blank",rel:"noopener noreferrer"}},[t._v("继承与原型链 - JavaScript | MDN"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("可能是我的笔记记得过多了吧，把这些笔记整理成文章的思路花费了一些时间。不过总算是完成了，这也只是半节课的内容。看来今天正式完结系统课还是有难度，不仅如此，今天份的博客恐怕也要拖到明天才能写完了。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181129A/003.jfif",alt:"终点"}})]),a("p")])},[],!1,null,null,null);s.default=e.exports}}]);