(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{329:function(t,s,a){"use strict";a.r(s);var n=a(40),r=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"tip custom-block"},[a("p",[t._v("自从前几天出差回来，就断了几天的博客写作，同时我的学习规律也被打乱了不少。今天时间也比较晚了，我就写一篇应该不算很长的博客。这次的博客应该是一个系列的，因为我这几天学习了通过JavaScript实现各种算法。学完之后感觉还是需要归纳一下比较好，但是因为内容多，为了归纳地更详细，效果更好，所以我打算写成关于算法的博客系列，方便我巩固这方面的知识。")])]),t._v(" "),a("p",[t._v("说到算法，就要先谈谈算法的特征，什么是算法呢？")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181002A/timg.jpg",alt:"算法"}})]),a("p"),t._v(" "),a("p",[t._v("以下是我在学习笔记中对算法的特征归纳：")]),t._v(" "),a("ol",[a("li",[t._v("输入：一个算法必须有零个或以上输入量。")]),t._v(" "),a("li",[t._v("输出：一个算法应有一个或以上输出量，输出量是算法计算的结果。")]),t._v(" "),a("li",[t._v("明确性：算法的描述必须无歧义。")]),t._v(" "),a("li",[t._v("有限性：算法必须在有限时间内完成任务。")]),t._v(" "),a("li",[t._v("有效性：又称可行性。算法中描述的操作都是可以通过计算机完成。")])]),t._v(" "),a("p",[t._v("算法作为一个重要知识点，把每种算法都弄明白是很有必要的。通过这次关于算法的博客系列，我将在博客用自然语言解释几种排序的具体排序规则，以及使用JavaScript将几种排序规则实现。本次博客就将冒泡排序的规则以及JavaScript实现方式进行分析。")]),t._v(" "),a("h2",{attrs:{id:"冒泡排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 冒泡排序")]),t._v(" "),a("p",[t._v("冒泡排序是可以将数组中的数字由大到小进行排序的一种排序方法。其主要步骤大致如下：")]),t._v(" "),a("ol",[a("li",[t._v("数组中第1个数字与第2个数字进行比较，如果第1个大于第2个，则两个数字交换位置。")]),t._v(" "),a("li",[t._v("数组中第2个数字与第3个数字进行比较，如果第2个大于第3个，则两个数字交换位置。")]),t._v(" "),a("li",[t._v("以这种思路进行排序，直到排到最后一个数字（设为n），此时数组中最大的数字便被排到数组的最后一位，第一轮排序结束。")]),t._v(" "),a("li",[t._v("第二轮排序开始，重复上一步操作，此时只需要排到第n-1个数字，数组中第二大的数字也被排到数组后方。")]),t._v(" "),a("li",[t._v("经过n-1轮的排序，每个大数字都被移至小数字的后方，排序完成。")])]),t._v(" "),a("p",[t._v("下面是一个冒泡排序的一个动图实现效果，通过这个动图，可以发现，冒泡排序的思路和我在前文使用自然语言描述的思路基本是一致的：")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181002A/001.gif",alt:"冒泡排序"}})]),t._v("\n接下来就将对冒泡排序的JavaScript的实现代码进行分析："),a("p"),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bubleSort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("其中：")]),t._v(" "),a("ol",[a("li",[t._v("“for(let i=0;i < arr.length-1;i++)”这一段代表排序的轮数，排序需要经过length-1轮的排序，即i=length-1时退出循环。其中length为数组长度。")]),t._v(" "),a("li",[t._v("“for(let j = 0; j < arr.length-1-i; j++)”这一段代表当前被选中排序的数组的下标，每轮排序将会在排到下标为length-1-i时完成该轮排序，即j=length-i-1时退出循环。")]),t._v(" "),a("li",[t._v("在arr[j] > arr[j+1]时，arr[j]与arr[j+1]交换位置。")])]),t._v(" "),a("p",[t._v("该代码运行效果截图如下，可见该代码可以有效地实现数组的排序：")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181002A/%E6%8D%95%E8%8E%B7.PNG",alt:"冒泡排序"}})]),a("p"),t._v(" "),a("p",[t._v("冒泡排序的时间复杂度为 O(n^2)，数组长度每增加10倍，排序长度增加100倍。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("以上就是这次关于冒泡排序算法的内容，由于时间不是很充裕，因此本次博客只写了一个算法。如果一次性将这次的算法博客写完，不仅博客显得冗长，而且可能还会降低学习效率。因此接下来的几种算法，我会在以后有空的时候对它们分别进行分析。")])])},[],!1,null,null,null);s.default=r.exports}}]);