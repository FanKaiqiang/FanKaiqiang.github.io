(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{343:function(t,e,a){"use strict";a.r(e);var n=a(40),_=Object(n.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"tip custom-block"},[a("p",[t._v("今天把给简历加JS的课程完成了，还差一篇DOM的博客。其实要不是作业这样要求了，我可能都不知道我这节课学的这些东西其实是DOM相关的知识。所以这篇博客又是扫盲向的博客，写起来可能会比较费时间，因为要边写边查资料、构思文章结构。")])]),t._v(" "),a("p",[t._v("明天又要出差了，今天晚上给这一篇尽量开一个头吧。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181023A/001.jpg",alt:"DOM"}})]),a("p"),t._v(" "),a("h2",{attrs:{id:"什么是dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是dom","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是DOM")]),t._v(" "),a("p",[t._v("我可以这样说，因为我之前孤陋寡闻的原因，我并不知道DOM是什么。还是直接看MDN里是怎么介绍DOM的吧：")]),t._v(" "),a("blockquote",[a("p",[t._v("文档对象模型 (DOM) 是HTML和XML文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合。简言之，它会将web页面和脚本或程序语言连接起来。")])]),t._v(" "),a("blockquote",[a("p",[t._v("一个web页面是一个文档。这个文档可以在浏览器窗口或作为HTML源码显示出来。但上述两个情况中都是同一份文档。文档对象模型（DOM）提供了对同一份文档的另一种表现，存储和操作的方式。 DOM是web页面的完全的面向对象表述，它能够使用如 JavaScript等脚本语言进行修改。")])]),t._v(" "),a("p",[t._v("这两段话把DOM讲得很清楚，DOM就是把html文档变成一种具有树形结构object的规则，这个树形结构的图像大概就是本文的题图所呈现的那样。DOM还提供了一种方式可以使得程序可以对这个结构进行访问，也就是等下会讲到的DOM API。")]),t._v(" "),a("h2",{attrs:{id:"重要的数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重要的数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 重要的数据类型")]),t._v(" "),a("p",[t._v("DOM 被设计成与特定编程语言相独立，使文档的结构化表述可以通过单一、一致的API获得。API中传入的不同的数据类型需要去注意。了解这些概念是掌握api的关键，必须理解它们。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181023A/002.jpg",alt:"DOM"}})]),a("p"),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("特征")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Node类型")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("DOM1级定义了一个Node接口，该接口由DOM中所有节点类型实现。这个Node接口在JS中是作为Node类型实现的。在IE9以下版本无法访问到这个类型，JS中所有节点都继承自Node类型，都共享着相同的基本属性和方法。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Element类型")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Element提供了对元素标签名，子节点和特性的访问，常用HTML元素比如div，span，a等标签就是element中的一种。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Text类型")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Text表示文本节点，它包含的是纯文本内容，不能包含html代码，但可以包含转义后的html代码。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Attr类型")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Attr类型表示元素的特性，相当于元素的attributes属性中的节点")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Comment类型")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Comment表示HTML文档中的注释")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Document")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Document表示文档，在浏览器中，document对象是HTMLDocument的一个实例，表示整个页面，它同时也是window对象的一个属性")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("DocumentFragment类型")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("DocumentFragment是所有节点中唯一一个没有对应标记的类型，它表示一种轻量级的文档，可能当作一个临时的仓库用来保存可能会添加到文档中的节点。")])])])]),t._v(" "),a("p",[t._v("以上是几种常见的几种Node类型。需要注意的是，HTML中的节点并不只是包括元素节点，它还包括文本节点，注释节点等。Node有一个属性nodeType表示Node的类型，它是一个整数，其数值分别表示相应的Node类型，可以借助这个属性的值来判断Node的类型：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("常量与值")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Node.ELEMENT_NODE:1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("一个 元素 节点，例如 <p> 和 <div>。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Node.ATTRIBUTE_NODE:2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("元素的耦合属性。已弃用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Node.TEXT_NODE:3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Element 或者 Attr 中实际的  文字")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Node.CDATA_SECTION_NODE:4")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("一个 CDATASection。已弃用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Node.ENTITY_REFERENCE_NODE:5")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("一个 XML 实体引用节点。已弃用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Node.ENTITY_NODE:6")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("一个 XML <!ENTITY ...>  节点。已弃用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Node.PROCESSING_INSTRUCTION_NODE:7")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("一个用于XML文档的 ProcessingInstruction ，例如 <?xml-stylesheet ... ?> 声明。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Node.COMMENT_NODE:8")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("一个 Comment 节点。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Node.DOCUMENT_NODE:9")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("一个 Document 节点。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Node.DOCUMENT_TYPE_NODE:10")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("描述文档类型的 DocumentType 节点。例如 <!DOCTYPE html>  就是用于 HTML5 的。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Node.DOCUMENT_FRAGMENT_NODE:11")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("一个 DocumentFragment 节点")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Node.NOTATION_NODE:12")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("一个 XML <!NOTATION ...> 节点。已弃用")])])])]),t._v(" "),a("p",[t._v("比如要判断一个Node是不是元素，可以这样判断：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('if(someNode.nodeType == 1){\nconsole.log("Node is a element");\n}\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"dom-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom-api","aria-hidden":"true"}},[t._v("#")]),t._v(" DOM API")]),t._v(" "),a("p",[t._v("DOM API也叫DOM 接口。当在创建一个脚本时-无论是使用内嵌 <script>元素或者使用在web页面脚本加载的方法，都可以使用 document或 window 元素的API来操作文档本身或获取文档的子类（web页面中的各种元素）。")]),t._v(" "),a("p",[t._v("许多对象能从不同的API被调用。在处理这些元素所对应的不同类型的数据时，这些元素可能会有专用的API，这也是刚才讲API传入的数据类型的原因。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181023A/timg.jpg",alt:"API"}})]),a("p"),t._v(" "),a("p",[t._v("下面是在web和XML页面脚本中使用DOM时，由MDN列出的一些常用的API简要，在给简历加JS的课程中也使用到了不少，借着这次博客，就将DOM的所有API在简单地分类解析一下。")]),t._v(" "),a("h3",{attrs:{id:"节点创建型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点创建型","aria-hidden":"true"}},[t._v("#")]),t._v(" 节点创建型")]),t._v(" "),a("p",[t._v("createElement：通过传入指定的一个标签名来创建一个元素，如果传入的标签名是一个未知的，则会创建一个自定义的标签。")]),t._v(" "),a("p",[t._v("createTextNode：用来创建一个文本节点。")]),t._v(" "),a("p",[t._v("cloneNode：用来返回调用方法的节点的一个副本，它接收一个bool参数，用来表示是否复制子元素。")]),t._v(" "),a("p",[t._v("createDocumentFragment：用来创建一个DocumentFragment。添加大量节点到文档中时会使用到。")]),t._v(" "),a("h3",{attrs:{id:"页面修改型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#页面修改型","aria-hidden":"true"}},[t._v("#")]),t._v(" 页面修改型")]),t._v(" "),a("p",[t._v("appendChild：将指定的节点添加到调用该方法的节点的子元素的末尾。")]),t._v(" "),a("p",[t._v("insertBefore：添加一个节点到一个参照节点之前。")]),t._v(" "),a("p",[t._v("removeChild：删除指定的子节点并返回")]),t._v(" "),a("p",[t._v("replaceChild：使用一个节点替换另一个节点")]),t._v(" "),a("h3",{attrs:{id:"节点查询型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点查询型","aria-hidden":"true"}},[t._v("#")]),t._v(" 节点查询型")]),t._v(" "),a("p",[t._v("document.getElementById：根据元素id返回元素，返回值是Element类型，如果不存在该元素，则返回null。")]),t._v(" "),a("p",[t._v("document.getElementsByTagName：这个接口根据元素标签名获取元素，返回一个即时的HTMLCollection类型。")]),t._v(" "),a("p",[t._v("document.getElementsByName：通过指定的name属性来获取元素，它返回一个即时的NodeList对象。")]),t._v(" "),a("p",[t._v("document.getElementsByClassName：根据元素的class返回一个即时的HTMLCollection。")]),t._v(" "),a("p",[t._v("document.querySelector：返回第一个匹配的元素，如果没有匹配的元素，则返回null。")]),t._v(" "),a("p",[t._v("document.querySelectorAll：返回的是所有匹配的元素，而且可以匹配多个选择符")]),t._v(" "),a("h3",{attrs:{id:"节点关系型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点关系型","aria-hidden":"true"}},[t._v("#")]),t._v(" 节点关系型")]),t._v(" "),a("p",[t._v("parentNode：每个节点都有一个parentNode属性，它表示元素的父节点。")]),t._v(" "),a("p",[t._v("parentElement：返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element，如果不是，则返回null")]),t._v(" "),a("p",[t._v("previousSibling：节点的前一个节点，如果该节点是第一个节点，则为null。")]),t._v(" "),a("p",[t._v("previousElementSibling：返回前一个元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持。")]),t._v(" "),a("p",[t._v("nextSibling：节点的后一个节点，如果该节点是最后一个节点，则为null。")]),t._v(" "),a("p",[t._v("nextElementSibling：返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。")]),t._v(" "),a("p",[t._v("childNodes：返回一个即时的NodeList，表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。")]),t._v(" "),a("p",[t._v("children：一个即时的HTMLCollection，子节点都是Element，IE9以下浏览器不支持。")]),t._v(" "),a("p",[t._v("firstNode：第一个子节点")]),t._v(" "),a("p",[t._v("lastNode：最后一个子节点")]),t._v(" "),a("p",[t._v("hasChildNodes方法：可以用来判断是否包含子节点。")]),t._v(" "),a("h3",{attrs:{id:"元素属性型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素属性型","aria-hidden":"true"}},[t._v("#")]),t._v(" 元素属性型")]),t._v(" "),a("p",[t._v("setAttribute：根据名称和值修改元素的属性")]),t._v(" "),a("p",[t._v("getAttribute：返回指定的特性名相应的特性值，如果不存在，则返回null或空字符串。")]),t._v(" "),a("h3",{attrs:{id:"元素样式型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素样式型","aria-hidden":"true"}},[t._v("#")]),t._v(" 元素样式型")]),t._v(" "),a("p",[t._v("window.getComputedStyle：用来获取应用到元素后的样式")]),t._v(" "),a("p",[t._v("getBoundingClientRect：用来返回元素的大小以及相对于浏览器可视窗口的位置")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("因为在外面出差只能随便写写，一下子列出了一大堆的API。好多之前都没见过，现在也只是走马观花地了解一下。本来也想每条都整明白，无奈如果条条都仔细分析，一篇博客可能会太长了。所以只能大致地了解这些API的功能，同时经过这篇博客也算对DOM有了一个初步的了解，等到学到DOM API的课程的时候应该能够更加深入地了解DOM，到时候回头来看这些我一知半解的知识可能会更顺利一些。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181023A/003.jpg",alt:"出差"}})]),a("p"),t._v(" "),a("p",[t._v("在博客编写过程中，以下内容给我带来了帮助，得到了许多启发，在此鸣谢：")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"http://luopq.com/2015/11/30/JavaScript-dom/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript操作DOM常用API总结"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction",target:"_blank",rel:"noopener noreferrer"}},[t._v("DOM概述 - Web API 接口 | MDN"),a("OutboundLink")],1)])])])},[],!1,null,null,null);e.default=_.exports}}]);