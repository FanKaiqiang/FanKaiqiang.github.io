(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{345:function(s,t,a){"use strict";a.r(t);var n=a(40),e=Object(n.a)({},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("div",{staticClass:"tip custom-block"},[a("p",[s._v("今天被这个提前结束实习的事情整的有点焦虑，刚才打电话给伍军云老师他也没接。可能他是没有听到吧，我只有等会再打给他了。因为这个原因我也没有继续看系统课了，感觉看不进去，就干脆现在把这篇博客开一下，等这篇博客写得差不多了，我就再打电话给他好了，希望我能回去这件事能确定下来吧。")])]),s._v(" "),a("p",[s._v("这次博客的主题是JS函数，这节课是上周出差的时候学的，也有好一些天了，今天就把当时的笔记整理一下。在上课的过程中，内容还算清晰，所以写起来应该不会花很长时间在查资料上面，就把笔记大概地过一遍。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181030A/timg.jpg",alt:"焦虑"}})]),a("p"),s._v(" "),a("h2",{attrs:{id:"函数的五种声明方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的五种声明方式","aria-hidden":"true"}},[s._v("#")]),s._v(" 函数的五种声明方式")]),s._v(" "),a("p",[s._v("之前学过，Function()是函数对象的构造函数，但是平时在声明函数的时候一般却不会用到它。这说明声明函数的方式是很多的，这里把声明函数的几种情况都归纳了一下：")]),s._v(" "),a("h3",{attrs:{id:"_1、具名函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、具名函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 1、具名函数")]),s._v(" "),a("p",[s._v("具名函数就是声明一个有自己的名字的函数，看一下如下的例子：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("index1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("index2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "function x(index1,index2,...){ ...   return ... }"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// undefined")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("其中function为关键字，代表声明一个函数。x为函数名，index1等等为传入的参数。return的值可以是任意类型的值，默认情况下会返回undefined。")]),s._v(" "),a("p",[s._v("对于使用console.log(x)直接输出x，之前讲过，因为x只接受字符串，所以会先调用.toString()方法把x转换为字符串，所以会把x以字符串形式打印出来。除此之外，console.log永远会额外输出一个undefined，这与console.log之前需要打印的内容是无关的。")]),s._v(" "),a("h3",{attrs:{id:"_2、匿名函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、匿名函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 2、匿名函数")]),s._v(" "),a("p",[s._v("匿名函数就是声明一个没有名字的函数，比如：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("x")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("input1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("input2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("   \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_3、把具名函数赋值给变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、把具名函数赋值给变量","aria-hidden":"true"}},[s._v("#")]),s._v(" 3、把具名函数赋值给变量")]),s._v(" "),a("p",[s._v("这种方法是上面两种方法的混合版，但是这样使用是有问题的：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("x")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("input1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("input2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("   \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Uncaught ReferenceError: y is not defined")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这种情况产生原因是，函数在声明时的y的作用于只限制在function内部，在函数外部如果试图打印y，查找的是函数外部声明的y变量，因为在外部并没有声明y，所以报了个变量未定义的错误。")]),s._v(" "),a("h3",{attrs:{id:"_4、使用function-构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、使用function-构造函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 4、使用Function()构造函数")]),s._v(" "),a("p",[s._v("window.Function是用来构造函数的函数对象。在使用这种方法时，函数的所有内容都用字符串表示，并且可以在其中穿插变量，比如：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'x'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'y'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'return x+'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'+y'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_5、箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、箭头函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 5、箭头函数")]),s._v(" "),a("p",[s._v("箭头函数与一般声明函数的格式不同，它是通过一个箭头将参数与函数体链接在一起的，比如：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("sum")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("其中参数用括号包裹，函数体用大括号包裹。在如果函数体只有一个return的情况下，上述函数可以同时去掉大括号和return，这样表示：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("sum")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" y\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("同样地，如果函数传入的参数只有一个，连括号也是可以省略的：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("n2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("n")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在使用箭头函数要注意，箭头是由一个等号和一个大于号组成的。"),a("strong",[s._v("箭头函数是匿名函数")]),s._v("。如果要用箭头函数表示些复杂的函数，函数体的语句要用分号分开，如下例所示：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("f")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("hr"),s._v(" "),a("p",[s._v("讲完了这几种函数的声明方法，顺便探讨一下函数的name属性。顾名思义，函数的name属性就是『函数名』属性，事实真的是如此吗？")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181030A/004.jpg",alt:"困惑"}})]),a("p"),s._v(" "),a("p",[s._v("其实，这几种不同的函数声明方法，声明出来的函数的name属性的指向是有差异的。下面把他们都举例说明一下：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  具名函数：函数名指向声明函数时的命名")]),s._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//  "f"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("f2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  匿名函数：函数名指向被赋值的函数变量名")]),s._v("\nf2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//  "f2"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("f3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  混合方法：函数变量的函数名指向声明函数时的命名")]),s._v("\nf3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//  "f4"        ')]),s._v("\nf5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  构造函数声明：指向一个字符串“anonymous”")]),s._v("\nf5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//  "anonymous" (匿名的意思)')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("可见，name这个属性的值可以说是五花八门了，在不同情况下，name属性可能不是一个预想中的结果，这一点需要了解。")]),s._v(" "),a("h2",{attrs:{id:"函数的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的本质","aria-hidden":"true"}},[s._v("#")]),s._v(" 函数的本质")]),s._v(" "),a("p",[s._v("之前讲过，函数也是对象的一种。但是函数不同于其他对象，函数的使用被称为调用（call）。下面是一个函数调用的例子：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   调用了函数")]),s._v("\nf              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   因为没有产生传入，什么也没做")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("由此可见，可以认为函数就是一段可以反复调用的代码块。函数作为对象，其在内存中的存储形式也与对象相同，将函数的数和函数体分别使用一组key和value进行存储，其中函数体是以字符串形式存储在堆内存中的。")]),s._v(" "),a("p",[s._v("那么既然函数体被作为字符串存在内存中，如何将这些代码从中取出执行呢？这就要用到eval()这个方法了，eval()可以接受一个字符串，在把这个字符串当做代码执行，下面是几个例子：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("eval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1+1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("eval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1+\"1\"'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//  "11"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("eval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'alert(1)'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  undefined")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("函数的调用过程实际上就是eval(函数体)的过程。所以可以认为，函数就是一个可以执行代码的对象。那么在函数执行过程中，函数在内存中的表现又是如何的呢，那就要介绍一个叫做调用栈（call stack）的概念。")]),s._v(" "),a("p",[s._v("调用栈就是在每一个函数执行之前都会把这个函数的地址记入stack中，函数return时再回到这个stack地址。什么意思呢，之前讲到过栈的概念，函数的执行也是一样，遵守先进后出的规则。每次开始执行一个函数就将这个函数的地址放入栈中，在执行的过程中如果又触发了一个函数，就再将这个函数的地址也推入栈中。等到函数执行完毕，再把这个函数的地址从栈中取出。而最先执行的函数因为放在栈的底部，所以要在最后才能取出。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181030A/001.png",alt:"栈的模拟图片"}})]),a("p"),s._v(" "),a("p",[s._v("这里要提到一种特殊情况，刚才说到在函数执行的过程中也会触发函数执行，如果这种嵌套执行函数的层数越来越多，往调用栈里存放的地址也会越来越多。如果到了一个极限，浏览器是会报错的。这种情况称之为stack overflow，即栈溢出。")]),s._v(" "),a("h2",{attrs:{id:"call-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-方法","aria-hidden":"true"}},[s._v("#")]),s._v(" call()方法")]),s._v(" "),a("p",[s._v("前文讲到了函数的调用，调用就是call的意思，而call()方法同样是可以表示一个函数的调用的：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面是函数调用的两种方法，第一个是使用的常规方法，第二种就是这节要讲的call()方法。两者效果是相同的。")]),s._v(" "),a("p",[s._v("但是从上面的例子可以看出，使用call()方法明显比常规方法要麻烦一些。在传入参数时要先传undefined、再传函数的参数。这就涉及到函数的两个属性了：this与arguments。")]),s._v(" "),a("p",[s._v("this就是call()方法的第一个参数，在函数中也可以通过this来获得call()的第一个参数。在普通模式下，如果this:undefined，浏览器会将this转为window。而在严格模式下（即输入“use strict”），this:undefined将会被输出。")]),s._v(" "),a("p",[s._v("arguments则代表this后面的其他参数，this后面的参数都可以用arguments得到。arguments是一个伪数组，即没有数组的公有属性，原型链中是没有Array.prototype的。")]),s._v(" "),a("h2",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域","aria-hidden":"true"}},[s._v("#")]),s._v(" 作用域")]),s._v(" "),a("p",[s._v("作用域是与变量相关的概念。之前有所了解，变量有局部变量与全局变量。在所有函数之外声明的变量，叫做全局变量，因为它可被当前文档中的任何其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在该函数内部访问。可以这样说，这两种变量的区别就是作用域不同。")]),s._v(" "),a("p",[s._v("说到作用域，大概可以这样理解。只要有一个函数就有一个作用域，在这个函数内声明的变量的适用范围就在这个作用域里。全局作用域即为window/global，下面看一个关于作用域的例子：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  var a（变量提升）")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//undefined")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("这个例子设计到之前学到过的"),a("strong",[s._v("变量提升")]),s._v("，即在代码执行前，var a = 2会被拆分为var a与a = 2。并且var a会被提升到作用域的最前面，即此例中的console.log(a)前面，因为这个a是在f1的作用域中声明的a，所以在f1外部的a是不会影响到f1里面的a的。f1里的a并没有赋值，因此得出的结果是undefined。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181030A/002.jpg",alt:"变量提升"}})]),a("p"),s._v(" "),a("p",[s._v("而f4中并没有声明变量a，因此函数会在它的父作用域中寻找变量a，如果父作用域中也没有则会继续往外层寻找，直到找到全局作用域，若都没有就会报变量未定义的错。因此此例中f4的a变量即是全局变量a，f1中的a同样不会影响到外部的a。")]),s._v(" "),a("p",[s._v("在声明一个变量时，一般都有在声明是加上var关键字，这是为了避免讲变量声明为全局变量。不过并不是在声明是不加var就是声明全局变量，比如说：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("首先会默认这是在赋值，然后会像之前例子的f4一样会向先辈元素回溯地寻找这个要被赋值的变量，直到发现在全局范围都没有声明过变量a，这条语句才具有声明并赋值全局变量的功能。因此为了避免通过这种形式产生全局变量，所以在声明变量时才要加var。")]),s._v(" "),a("p",[s._v("最后讲一个叫做"),a("strong",[s._v("闭包")]),s._v("的概念。闭包就是一个函数使用了它范围之外的值，那么这个函数与这个变量就形成一个闭包。正如上一个例子中的f4与a，就可以看做是一个闭包。")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("不知不觉关于JS函数的笔记就归纳完了，总的来说这节课并没有什么重大的难点，比之前的解惑型的博客好写不少，至少不用自己再去查资料什么的。这也是我的第三十篇博客，不知不觉就已经过了两个月了。今天正式向我在的实习单位提出了结束实习，所有人都不支持我，但是因为我相信我自己的选择，因此也硬着头皮坚持离开了。明天回学校，后天开始我自己规划的学习，希望我不会让自己失望。")]),a("div",{staticStyle:{"text-align":"center"}},[a("img",{attrs:{src:"20181030A/003.jpg",alt:"就是犟"}})]),a("p")])},[],!1,null,null,null);t.default=e.exports}}]);